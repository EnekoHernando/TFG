{"docstore/data": {"47e9ef11-42cf-4a56-8b44-f1b425ac60c6": {"__data__": {"id_": "47e9ef11-42cf-4a56-8b44-f1b425ac60c6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02146a45-2a3e-4a71-879e-de39c4a101ac", "node_type": "4", "metadata": {"filename": "Ejemplo_Agenda.txt"}, "hash": "7ff74052195dcfdb09047f1bfae477953192f3aebd56cd1d2e7fa52bd3e50293", "class_name": "RelatedNodeInfo"}}, "text": "# Escritura de datos\n\nagenda = [\n\t\t\t{ 'nombre': 'Pablo', 'email': 'garaizar@deusto.es', 'telf': 563737745 },\n\t\t\t{ 'nombre': 'Borja', 'email': 'bosanz@deusto.es', 'telf': 8745737345 },\n\t\t\t{ 'nombre': 'M\u00aa Luz', 'email': 'mlguenaga@deusto.es', 'telf': 757573626 },\n\t\t\t{ 'nombre': 'Jenny', 'email': 'jfajardo@deusto.es', 'telf': 2341325323 }\n\t\t ]\n\nfichero = open('datos.csv', 'w')\n\nfor elemento in agenda:\n\tfichero.write(elemento['nombre'] + ';' + elemento['email'] + ';' + str(elemento['telf']) + ';' + '\\n')\n\nfichero.close()\n\n# Lectura de datos\n\nagenda = []\n\nfichero = open('datos.csv', 'r')\ndatos = fichero.readlines()\nfichero.close()\n\nfor elemento in datos:\n\tcampos = elemento.split(';')\n\tcontacto = { 'nombre': campos[0], 'email': campos[1], 'telf': campos[2] }\n\tagenda.append(contacto)\n\nprint(agenda)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0645953f-d0fd-4a7c-bed3-bfe2a175d003": {"__data__": {"id_": "0645953f-d0fd-4a7c-bed3-bfe2a175d003", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "48a58fe0-7595-4d4c-b41c-5137dee0f666", "node_type": "4", "metadata": {"filename": "Ejemplo_Twitch.txt"}, "hash": "bc5b2adf0b7f84e242cbc62eb765cf65976bc493157477061cf14ad9ee1a63aa", "class_name": "RelatedNodeInfo"}}, "text": "# tabla con canales de Twitch, cada fila es un canal\n# campos: nombre, url, subs, viewers\ncanales = [\n\t\t\t[ 'Ibai', 'http://twitch.tv/ibai', 8400123, 59859 ],\n\t\t\t[ 'AuronPlay', 'http://twitch.tv/AuronPlay', 10700123, 106996 ],\n\t\t\t[ 'Xokas', 'http://twitch.tv/xokas', 1323421, 11511 ],\n\t\t\t[ 'Rubius', 'http://twitch.tv/elrubius', 1423563, 36941 ]\n\t\t  ]\n\ndef alta (canales):\n\tnombre = input('Introduce el nombre del canal: ')\n\turl = input('Introduce la direcci\u00f3n del canal: ')\n\tsubs = int(input('Introduce el n\u00ba de suscriptores del canal: '))\n\tviewers = input('Introduce el n\u00ba de viewers del canal: ')\n\tcanal = [nombre, url, subs, viewers]\n\tcanales.append(canal)\n\ndef menu (pregunta):\n\tfor i in range(len(canales)):\n\t\tprint(f'{i} - {canales[i][0]}')\n\tposicion = int(input(pregunta))\n\treturn posicion\n\ndef baja (canales):\n\tposicion = menu('\u00bfQu\u00e9 canal quieres borrar? ')canales.remove(canales[posicion])\n\ndef modificar (canales):\n\tposicion = menu('\u00bfQu\u00e9 canal quieres modificar? ')", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e14e67f4-7056-49d0-b5f2-79b9f6355d9c": {"__data__": {"id_": "e14e67f4-7056-49d0-b5f2-79b9f6355d9c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "48a58fe0-7595-4d4c-b41c-5137dee0f666", "node_type": "4", "metadata": {"filename": "Ejemplo_Twitch.txt"}, "hash": "bc5b2adf0b7f84e242cbc62eb765cf65976bc493157477061cf14ad9ee1a63aa", "class_name": "RelatedNodeInfo"}}, "text": "canales.remove(canales[posicion])\n\talta(canales)\n\ndef mostrarMasSubs(canales):\n\tmayor = canales[0]\n\tfor elemento in canales:\n\t\tif (elemento[2] > mayor[2]):\n\t\t\tmayor = elemento\n\tprint(f'El canal con m\u00e1s subs es: {mayor[0]} ({mayor[2]} subs)')\n\ndef mostrarMenosViewers(canales):\n\tmenor = canales[0]\n\tfor elemento in canales:\n\t\tif (elemento[3] < menor[3]):\n\t\t\tmenor = elemento\n\tprint(f'El canal con menos viewers es: {menor[0]} ({menor[3]} viewers)')\n\ndef mostrarMediaViewers(canales):\n\tsuma = 0\n\tfor elemento in canales:\n\t\tsuma = suma + elemento[3]\n\tmedia = suma / len(canales)\t\n\tprint(f'La media de viewers es: {media} viewers')\n\nwhile (True):\n\tprint('Gestiona tus suscripciones en Twitch:')\n\tprint('1 - Muestra tus suscripciones')\n\tprint('2 - A\u00f1ade una suscripci\u00f3n nueva')\n\tprint('3 - Borra una suscripci\u00f3n')\n\tprint('4 - Modifica una suscripci\u00f3n')\n\tprint('5 - Mostrar el canal con m\u00e1s subs')\n\tprint('6 - Mostrar el canal con menos viewers')\n\tprint('7 - Mostrar la media de viewers de tus canales')\n\tprint('0 - Salir')\n\topcion = int(input('\u00bfOpci\u00f3n? '))if (opcion == 1):\n\t\t# mostrar\n\t\tprint(canales)\n\telif (opcion == 2):\n\t\t# a\u00f1adir\n\t\talta(canales)\n\telif (opcion == 3):\n\t\t# a\u00f1adir\n\t\tbaja(canales)\n\telif (opcion == 4):\n\t\t# a\u00f1adir\n\t\tmodificar(canales)\n\telif (opcion == 5):\n\t\t# mostrar canal con m\u00e1s subs\n\t\tmostrarMasSubs(canales)\n\telif (opcion == 6):\n\t\t# mostrar canal con menos viewers\n\t\tmostrarMenosViewers(canales)\n\telif (opcion == 7):\n\t\t# mostrar media de viewers\n\t\tmostrarMediaViewers(canales)\n\telif (opcion == 0):\n\t\t# salir\n\t\tbreak\n\nprint('Gracias por haber usado este programa :)')", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9b7fdaa-3e70-4784-b636-0eb6e31f60d0": {"__data__": {"id_": "b9b7fdaa-3e70-4784-b636-0eb6e31f60d0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bcc805f1-a826-47c9-81af-dfd7a0bdff27", "node_type": "4", "metadata": {"filename": "Ejercicio_Ahorcado.txt"}, "hash": "2c17c70d6a775f36157e2a2c24c74e5070a8b21cc5bb03267ceeba62149c2cd4", "class_name": "RelatedNodeInfo"}}, "text": "1.Preparar una lista con varias palabras y sacar por pantalla otra lista que contenga solamente las palabras de menos de 5 letras.lista = [\"melon\", \"manzana\", \"pi\u00f1a\", \"platano\", \"zanahoria\"]\notra = []\nfor palabra in lista:\n\tif (len(palabra) < 5):\n\t\t# otra = otra + [palabra]\n\t\totra.append(palabra)\nprint(otra)\ninput()\n2.Preparar una lista de todos los n\u00fameros entre 1 y 100 que sean divisibles entre 2, 3 y 5 o 7.\nnumeros = []\nfor i in range(1, 101):\n\tif (i % 2 == 0 or i % 3 == 0 or i % 5 == 0 or i % 7 == 0):\n\t\tnumeros.append(i)\nprint(numeros)\ninput()\n3.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "955587a4-a71b-42b6-8ecb-cf063f805f4d": {"__data__": {"id_": "955587a4-a71b-42b6-8ecb-cf063f805f4d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bcc805f1-a826-47c9-81af-dfd7a0bdff27", "node_type": "4", "metadata": {"filename": "Ejercicio_Ahorcado.txt"}, "hash": "2c17c70d6a775f36157e2a2c24c74e5070a8b21cc5bb03267ceeba62149c2cd4", "class_name": "RelatedNodeInfo"}}, "text": "Preparar una lista con 100 n\u00fameros aleatorios de 1 a 50 y sacar por pantalla otra lista que contenga esos n\u00fameros pero sin repeticiones.import random\nnumeros = []\notra = []\nfor i in range(100):\n\taleatorio = random.randint(1, 50)\n\tnumeros = numeros + [aleatorio] # numeros.append(aleatorio)\nfor i in numeros:\n\tif (i not in otra):\n\t\totra = otra + [i]\nprint(otra)\ninput()\n\n\nC\u00f3mo entrar en la terminal para mirar posibles fallos:\n\n\nEjecutar CMD - Simbolo del Sistema\n\nC:\\Users\\garaizar>cd Desktop\nC:\\Users\\garaizar\\Desktop>ecuacion.py\nDame el valor de a: a\nTraceback (most recent call last):\n  File \"C:\\Users\\garaizar\\Desktop\\ecuacion.py\", line 3, in <module>\n    a = int(input(\"Dame el valor de a: \"))\nValueError: invalid literal for int() with base 10: 'a'\n4.Ejercicio de Euromillones:\nimport random\nnumeros = []\nwhile (len(numeros) < 5):\n\taleatorio = random.randint(1, 50)\n\tif (aleatorio not in numeros):\n\t\tnumeros = numeros + [aleatorio]\nprint(numeros)\nestrellas = []\nwhile (len(estrellas) < 2):\n\taleatorio = random.randint(1, 11)\n\tif (aleatorio not in estrellas):\n\t\testrellas = estrellas + [aleatorio]\nprint(estrellas)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e16197c7-1b52-481c-9b7b-cf14259c21fb": {"__data__": {"id_": "e16197c7-1b52-481c-9b7b-cf14259c21fb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bea8640c-52f0-4ff4-ae73-e935df3a343a", "node_type": "4", "metadata": {"filename": "Ejercicios_Corregidos.txt"}, "hash": "ac198d25b73101f1bd5cc15d286322428e06c43b767ad1075882a0b7ccf2186f", "class_name": "RelatedNodeInfo"}}, "text": "1.Preparar una lista con varias palabras y sacar por pantalla otra lista que contenga solamente las palabras de menos de 5 letras.lista = [\"melon\", \"manzana\", \"pi\u00f1a\", \"platano\", \"zanahoria\"]\notra = []\nfor palabra in lista:\n\tif (len(palabra) < 5):\n\t\t# otra = otra + [palabra]\n\t\totra.append(palabra)\nprint(otra)\ninput()\n2.Preparar una lista de todos los n\u00fameros entre 1 y 100 que sean divisibles entre 2, 3 y 5 o 7.\nnumeros = []\nfor i in range(1, 101):\n\tif (i % 2 == 0 or i % 3 == 0 or i % 5 == 0 or i % 7 == 0):\n\t\tnumeros.append(i)\nprint(numeros)\ninput()\n3.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "217ce391-91b4-4165-8ab1-b37fbcd23e28": {"__data__": {"id_": "217ce391-91b4-4165-8ab1-b37fbcd23e28", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bea8640c-52f0-4ff4-ae73-e935df3a343a", "node_type": "4", "metadata": {"filename": "Ejercicios_Corregidos.txt"}, "hash": "ac198d25b73101f1bd5cc15d286322428e06c43b767ad1075882a0b7ccf2186f", "class_name": "RelatedNodeInfo"}}, "text": "Preparar una lista con 100 n\u00fameros aleatorios de 1 a 50 y sacar por pantalla otra lista que contenga esos n\u00fameros pero sin repeticiones.import random\nnumeros = []\notra = []\nfor i in range(100):\n\taleatorio = random.randint(1, 50)\n\tnumeros = numeros + [aleatorio] # numeros.append(aleatorio)\nfor i in numeros:\n\tif (i not in otra):\n\t\totra = otra + [i]\nprint(otra)\ninput()\n\n\nC\u00f3mo entrar en la terminal para mirar posibles fallos:\n\n\nEjecutar CMD - Simbolo del Sistema\n\nC:\\Users\\garaizar>cd Desktop\nC:\\Users\\garaizar\\Desktop>ecuacion.py\nDame el valor de a: a\nTraceback (most recent call last):\n  File \"C:\\Users\\garaizar\\Desktop\\ecuacion.py\", line 3, in <module>\n    a = int(input(\"Dame el valor de a: \"))\nValueError: invalid literal for int() with base 10: 'a'\n4.Ejercicio de Euromillones:\nimport random\nnumeros = []\nwhile (len(numeros) < 5):\n\taleatorio = random.randint(1, 50)\n\tif (aleatorio not in numeros):\n\t\tnumeros = numeros + [aleatorio]\nprint(numeros)\nestrellas = []\nwhile (len(estrellas) < 2):\n\taleatorio = random.randint(1, 11)\n\tif (aleatorio not in estrellas):\n\t\testrellas = estrellas + [aleatorio]\nprint(estrellas)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c7fa7ae-6deb-4acd-86e3-c286212c1610": {"__data__": {"id_": "7c7fa7ae-6deb-4acd-86e3-c286212c1610", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8b0a6950-0656-4ee0-aebd-5d8b29251ba2", "node_type": "4", "metadata": {"filename": "Prog1-01-Introduccion.pdf"}, "hash": "7d10debcbfcd89601f2b7f30e2fff8438a9eedf467a74bbd6c9ce260e2740d6d", "class_name": "RelatedNodeInfo"}}, "text": "  Programaci\u00f3n I\nIntroducci\u00f3n\n \nPablo Garaizar Sagarminaga\nBorja Sanz Urquijo\nFacultad de Ingenier\u00eda  \u00cdndice\n\u25cfEstructura de un ordenador\n\u25cfSistemas operativos.\u25cfProgramaci\u00f3n de aplicaciones.Estructura de un ordenador\u00bfQu\u00e9 componentes dentro de \nun ordenador conoces?Procesadores  Procesador\n\u25cfCPU: Central Processing Unit .\u25cfEs el componente fundamental de un \nordenador.\u25cfSe encarga de ejecutar los programas a partir \nde instrucciones m\u00e1quina.\u25cfRealiza:\n\u25cfOperaciones l\u00f3gicas y matem\u00e1ticas b\u00e1sicas.\u25cfAccesos a memoria.\u00bfSabes lo que es la \nLey de Moore?Memoria  Memoria\n\u25cfDispositivo que retiene, memoriza o almacena datos \ninform\u00e1ticos durante alg\u00fan intervalo de tiempo.\u25cfMemoria primaria: \n\u25cfDirectamente conectada a la CPU.\u25cfContiene programas y datos con los que se operan.\u25cfEs direccionable (ver bus de direcciones).\u25cfMemoria secundaria:\n\u25cfSistemas de almacenamiento masivo (discos, cintas, \netc.).Memoria\n  Memoria\n\u25cfTiempo de acceso: nanosegundos (10-9 s).1 Hz  1 s Latido humano.6 Hz  150 ms Latencia de b\u00fasqueda en DVD/CD-ROM/Floppy Disk.100 Hz 10 ms Latencia de acceso a disco duro.13 KHz 77 \u00b5s  Acceso a pendrive USB.75 KHz 13 \u00b5s  Escritura en un SSD.180 KHz 5 \u00b5s   Lectura en un SSD.400 MHz 2.5 ns Latencia t\u00edpica de acceso a DDR DRAM.1 GHz 1 ns Acceso a memoria cach\u00e9 L1.2 GHz 500 ps Frecuencia de reloj t\u00edpica en CPU.Buses  Buses\n\u25cfBus de datos:\n\u25cfTransfiere datos entre dispositivos.\u25cfBus de direcciones:\n\u25cfDefine la direcci\u00f3n a la que se quiere acceder.\u25cfIndependiente del bus de datos.\u25cfBus de control:\n\u25cfControla el acceso concurrente a los buses de \ndirecciones y de datos.Buses\n\u00bfQu\u00e9 le dice un bit a otro?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8db46277-fc30-4511-8919-4934c6151676": {"__data__": {"id_": "8db46277-fc30-4511-8919-4934c6151676", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8b0a6950-0656-4ee0-aebd-5d8b29251ba2", "node_type": "4", "metadata": {"filename": "Prog1-01-Introduccion.pdf"}, "hash": "7d10debcbfcd89601f2b7f30e2fff8438a9eedf467a74bbd6c9ce260e2740d6d", "class_name": "RelatedNodeInfo"}}, "text": "\u00a1Nos vemos en el bus!Almacenamiento  Almacenamiento\n\u25cfDispositivos magn\u00e9ticos:\n\u25cfDiscos duros.\u25cfDiskettes.\u25cfCintas magn\u00e9ticas.\u25cfDispositivos de estado s\u00f3lido.\u25cfDispositivos \u00f3pticos:\n\u25cfCD-ROM, CD-R/RW.\u25cfDVD-ROM, DVD-R/RW.\u25cfBlu-ray.\u25cfOtros.Dispositivos de entrada  Dispositivos de entrada\n\u25cfTeclado.\u25cfRat\u00f3n.\u25cfPantalla t\u00e1ctil.\u25cfEsc\u00e1ner.\u25cfC\u00e1mara.\u25cfMicr\u00f3fono.\u25cfOtros.Dispositivos de salida  Dispositivos de salida\n\u25cfPantallas.\u25cfCRT (Cathode Ray Tube ).\u25cfTFT-LCD ( Thin Film Transistor-Liquid Crystal \nDisplay ).\u25cfImpresoras.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9c80b84-b6f4-4059-af11-297122942a4d": {"__data__": {"id_": "b9c80b84-b6f4-4059-af11-297122942a4d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8b0a6950-0656-4ee0-aebd-5d8b29251ba2", "node_type": "4", "metadata": {"filename": "Prog1-01-Introduccion.pdf"}, "hash": "7d10debcbfcd89601f2b7f30e2fff8438a9eedf467a74bbd6c9ce260e2740d6d", "class_name": "RelatedNodeInfo"}}, "text": "\u25cfAltavoces.Perif\u00e9ricos de comunicaci\u00f3n\n\u25cfTarjetas de red (Ethernet / Wi-Fi).\u25cfM\u00f3dems.\u25cfConcentradores de red ( hubs).\u25cfConmutadores de red ( switches ).\u25cfEnrutadores ( routers).\u25cfBluetooth / Zigbee.\u25cfInfrarrojos (IR).\u25cfNFC.Sistemas Operativos\u00bfQu\u00e9 sistemas operativos \nconoces?\u00bfCu\u00e1l es el prop\u00f3sito de un \nsistema operativo?Sistemas operativos\n  \nProgramaci\u00f3n de aplicaciones  La met\u00e1fora de la receta\n\u25cfEn gastronom\u00eda:\n\u25cfUna persona piensa una receta  para hacer \nun pastel  usando un horno .\u25cfEn inform\u00e1tica:\n\u25cfUna persona programa un c\u00f3digo fuente  \npara hacer una aplicaci\u00f3n  (c\u00f3digo binario ) \nusando un compilador .La met\u00e1fora de la receta\n\u25cfEn gastronom\u00eda:\n\u25cfEn inform\u00e1tica:\n  \nFuente \u2192 Compilador \u2192 Binario  Lenguajes de programaci\u00f3n\n\u25cfHay diferentes  formas de definir el c\u00f3digo \nfuente:\n\u25cfC, C++, Java, Python, Perl, PHP, Ruby, etc.\u25cfBasta con que haya un compilador  que \ntraduzca  una de esas formas a c\u00f3digo binario \nejecutable  para que ese lenguaje funcione.Python  Python\n\u25cfCreado a finales de los 80 por Guido van Rossum .\u25cfSoftware libre.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb7aa400-771a-46b3-b4d4-40e9f9827743": {"__data__": {"id_": "cb7aa400-771a-46b3-b4d4-40e9f9827743", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8b0a6950-0656-4ee0-aebd-5d8b29251ba2", "node_type": "4", "metadata": {"filename": "Prog1-01-Introduccion.pdf"}, "hash": "7d10debcbfcd89601f2b7f30e2fff8438a9eedf467a74bbd6c9ce260e2740d6d", "class_name": "RelatedNodeInfo"}}, "text": "\u25cfMultiplataforma : Windows, Linux, MacOS, etc.\u25cfMultiparadigma : imperativo, orientado a objetos, \nfuncional, etc.\u25cfInterpretado .\u25cfTipado fuerte y din\u00e1mico .\u25cfC\u00f3digo legible .The art of \ncomputer programming  Referencias\n\u25cfIntel\u00ae 64 and IA-32 Architectures, Software \nDeveloper\u2019s Manual, Volume 1: Basic \nArchitecture, \nhttp://www.intel.la/content/dam/www/public/us/e\nn/documents/manuals/64-ia-32-architectures-so\nftware-developer-vol-1-manual.pdf\n\u25cfWikipedia.Referencias\n\u25cfIm\u00e1genes:\n\u25cfWikipedia\n\u25cfIkusi makusi, Marko Txopitea.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17412b99-53b6-4d88-98c4-5a74d8491534": {"__data__": {"id_": "17412b99-53b6-4d88-98c4-5a74d8491534", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8b0a6950-0656-4ee0-aebd-5d8b29251ba2", "node_type": "4", "metadata": {"filename": "Prog1-01-Introduccion.pdf"}, "hash": "7d10debcbfcd89601f2b7f30e2fff8438a9eedf467a74bbd6c9ce260e2740d6d", "class_name": "RelatedNodeInfo"}}, "text": "\u25cfhttp://abstrusegoose.com  \n\u25cfhttps://www.flickr.com/photos/schill/6890892084  \n\u25cfhttps://www.flickr.com/photos/gbpublic/19872841042  \n\u25cfhttps://www.flickr.com/photos/jmsmith000/3097202394\n\u25cfhttps://www.flickr.com/photos/jeroenbennink/3382865257  \n\u25cfhttps://www.flickr.com/photos/uwehermann/3417729666/  \n\u25cfhttp://www.electronics.dit.ie/staff/tscarff/architecture/neumann_har\nvard.gif", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2975fce4-d93c-471d-93cc-d3574a430f37": {"__data__": {"id_": "2975fce4-d93c-471d-93cc-d3574a430f37", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "58093e18-790a-4d20-9e2e-6224ae1d25c5", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosBasicos.pdf"}, "hash": "f69f76a8660f43d2ee85008da690e1e686cbf589a51d35e730954fd76aa4a914", "class_name": "RelatedNodeInfo"}}, "text": "  Programaci\u00f3n I\nEjercicios b\u00e1sicos\n \nPablo Garaizar Sagarminaga\nBorja Sanz Urquijo\nFacultad de Ingenier\u00eda  ASCII-art con Sysos\n\u25cfDibuja tu nombre con asteriscos:\npython dibujo.py\n*     *   * *****  ****\n*     *   *   *   *\n*     *   *   *    ***\n*     *   *   *       *\n***** ***** ***** ****  Hola, nombre!\u25cfDefine una variable con un nombre y saluda a \nese nombre:\npython  hola.py\n\u00a1Hola, Ana!Millas a km\n\u25cfDefine una variable con una distancia millas y \ndevuelve esa distancia en km:\n(1 milla = 1.609 km)\npython millas.py\n20 millas son 32.180 km  De a\u00f1os a minutos\n\u25cfDefine una variable para indicar tu edad y \ncalcula el n\u00famero de minutos que viviste.python minutos.py\nSi tienes 19 a\u00f1os, has vivido al menos \n9986400 minutos.Litros de agua\n\u25cfDefine el ancho, largo y profundidad de una \npiscina y calcula la cantidad de litros de agua \nque contiene (1 m\u00b3 = 1000 litros):\npython piscina.py\nUna piscina de 20 m de largo, 10 m de \nancho y 2 m de profundidad contiene \n400000 litros de agua.Farenheit a Celsius\n\u25cfDefine una temperatura en grados Farenheit y \ndevuelve su equivalente en Celsius:\nF = (C * 1.8) + 32\npython farenheit.py\n72 grados Farenheit son 22.222 grados \nCelsius  Pintar una pared\n\u25cfDefine la altura y anchura de una pared, as\u00ed \ncomo el n\u00famero de ventanas (1 m\u00b2) y puertas \n(1.6 m\u00b2) y calcula la cantidad de litros de \npintura necesarios (1 litro \u2192 10 m\u00b2).python pared.py\nUna pared de 3 m de alto y 10 m de \nancho con 2 ventanas y 1 puerta \nnecesita 2.64 litros de pintura.Segundos a horas\n\u25cfDefine un n\u00famero de segundos y devuelve su \nequivalencia en horas, minutos y segundos:\npython segundos.py\n8000 segundos son 2 horas, 13 minutos \ny 20 segundos.Cambio\n\u25cfDefine el coste de una compra y el dinero que se ha pagado para devolver los \ncambios en monedas de 2 \u20ac, 1 \u20ac, 50 c., 20 c., 10 c., 5 c. y 1c.:\npython cambio.py\nCoste: 18.78\nPagado: 20\nDevolver: 1.22\n0 monedas de 2 \u20ac\n1 monedas de 1 \u20ac\n0 monedas de 50 c\n1 monedas de 20 c\n0 monedas de 10 c\n0 monedas de 5 c\n1 monedas de 2 c\n0 monedas de 1 c  Salto de longitud\n\u25cfDefine la velocidad inicial y el \u00e1ngulo de salto \nde una persona y la gravedad para devolver la \nlongitud que recorrer\u00eda en ese planeta:\nlongitud = (v02 * sen(2*angulo)) / g\npython longitud.py\nUna persona que salte con un \u00e1ngulo de \n45\u00ba a 4 m/s en un planeta con g = \n1.633 m/s2 recorrer\u00eda 9.797 m.  Her\u00f3n de Alejandr\u00eda\n\u25cfDefine la longitud de los lados a, b y c de un \ntri\u00e1ngulo y calcula su \u00e1rea usando la f\u00f3rmula de \nHer\u00f3n:\npython heron.py\nUn tri\u00e1ngulo con lados de 11, 13 y 17 \nm tiene 71,499 m2.Ecuaci\u00f3n de segundo grado\n\u25cfDefine a, b y c en una ecuaci\u00f3n de segundo \ngrado y calcula sus ra\u00edces:\npython ecuacion.py\nRaices de 1 x2 + -5 x + 6 = 0:\nx = 3\nx = 2  Ca\u00edda libre\n\u25cfMuestra qu\u00e9 velocidad y cu\u00e1l ser\u00eda el espacio recorrido de un \ncuerpo en ca\u00edda libre durante los 10 primeros segundos.velocidad = 9.8 * tiempo\nespacio = \u00bd * 9.8 * tiempo2\npython caida.py \nt = 0, v = 0.0 m/s, 0.0 m recorridos.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cdede245-4e5e-4ca5-8526-566d2aa8f1e9": {"__data__": {"id_": "cdede245-4e5e-4ca5-8526-566d2aa8f1e9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "58093e18-790a-4d20-9e2e-6224ae1d25c5", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosBasicos.pdf"}, "hash": "f69f76a8660f43d2ee85008da690e1e686cbf589a51d35e730954fd76aa4a914", "class_name": "RelatedNodeInfo"}}, "text": "t = 3, v = 9.8 m/s, 4.9 m recorridos.t = 2, v = 19.6 m/s, 19.6 m recorridos.\u2026\nt = 10, v = 98.0 m/s, 490.0 m recorridos.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f82ee364-ad3e-4ee8-b4ae-050bc454d9b4": {"__data__": {"id_": "f82ee364-ad3e-4ee8-b4ae-050bc454d9b4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7486cc26-ef20-404c-be4e-54a98e97ee27", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosBucles.pdf"}, "hash": "f6273109b8c89b0c08cfd47ad70508e64caaad49ef1701f10f7892fc2c2c2266", "class_name": "RelatedNodeInfo"}}, "text": "  Programaci\u00f3n I\nEjercicios de alternativas y bucles\n \nPablo Garaizar Sagarminaga\nBorja Sanz Urquijo\nFacultad de Ingenier\u00eda  Museo\n\u25cfPide la edad para calcular el precio de la entrada al museo:\n\u25cfLos menores de 5 a\u00f1os entran gratis.\u25cfLos menores de 18 a\u00f1os tienen tarifa joven: 5 \u20ac.\u25cfLos adultos entre 19 y 64 a\u00f1os tienen tarifa normal: 10 \u20ac.\u25cfLos adultos mayores de 65 a\u00f1os tienen tarifa senior: 7 \u20ac.\u25cfLos mi\u00e9rcoles la entrada es gratuita para todo el mundo.python museo.py\nEdad: 17\n\u00bfEs mi\u00e9rcoles?false\nPrecio: 5 \u20ac  IMC\n\u25cfPide el peso en kg y la altura en metros para \ncalcular el IMC de una persona (peso / altura2) e \nindica la valoraci\u00f3n (<18.5 \u2192 bajo peso, 18.5-25 \n\u2192 peso normal, 25-30 \u2192 sobrepeso, >30 \u2192 \nobesidad):\npython imc.py\n\u00bfPeso?75\n\u00bfAltura?1.77\nIMC: 23.9394\nPeso normal  Trivial\n\u25cfPrograma un trivial con 3 preguntas y 3 alternativas:\npython trivial.py\n\u00bfCu\u00e1l es la capital de Francia?1) Madrid.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f8c1c21-e87e-460a-a9bc-7ac599366ea8": {"__data__": {"id_": "0f8c1c21-e87e-460a-a9bc-7ac599366ea8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7486cc26-ef20-404c-be4e-54a98e97ee27", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosBucles.pdf"}, "hash": "f6273109b8c89b0c08cfd47ad70508e64caaad49ef1701f10f7892fc2c2c2266", "class_name": "RelatedNodeInfo"}}, "text": "2) Paris.3) Helsinki.Respuesta?1\nNo, te has equivocado.Respuesta?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b59d6ff-80d3-4dc5-b4ea-360942e65a3b": {"__data__": {"id_": "9b59d6ff-80d3-4dc5-b4ea-360942e65a3b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7486cc26-ef20-404c-be4e-54a98e97ee27", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosBucles.pdf"}, "hash": "f6273109b8c89b0c08cfd47ad70508e64caaad49ef1701f10f7892fc2c2c2266", "class_name": "RelatedNodeInfo"}}, "text": "2\n\u00a1Correcto!Calificaciones\n\u25cfRecibe un valor num\u00e9rico de 0 a 10 y muestra \nsu calificaci\u00f3n.python calificacion.py\nNota?7.75\nCalificaci\u00f3n: NOTABLE.Zoltar el mago\n\u25cfPide el nombre de una persona y en funci\u00f3n de \nla primera letra, muestra un mensaje con su \nfuturo (un mensaje para las iniciales A-H, otro \npara I-Q y otro para R-Z):\npython zoltar.py\nComo te llamas?Pablo\nPablo, te auguro un futuro lleno de \n\u00e9xitos.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74227077-8902-4f0a-aeed-f1d42f076d95": {"__data__": {"id_": "74227077-8902-4f0a-aeed-f1d42f076d95", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7486cc26-ef20-404c-be4e-54a98e97ee27", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosBucles.pdf"}, "hash": "f6273109b8c89b0c08cfd47ad70508e64caaad49ef1701f10f7892fc2c2c2266", "class_name": "RelatedNodeInfo"}}, "text": "Series\n\u25cfMuestra las siguientes series de n\u00fameros:\n\u25cfTodos los n\u00fameros enteros del 1 al 10.\u25cfTodos los n\u00fameros enteros del 1 al 1000.\u25cfTodos los n\u00fameros de 10 en 10 del 20 al 500.\u25cfTodos los n\u00fameros enteros del 10 al 0.\npython series.p\u1ef3\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10 11 12 \u2026 1000\n20 30 40 50 60 70 80 90 100 110 \u2026 500\n10 9 8 7 6 5 4 3 2 1 0  Tabla de multiplicar\n\u25cfSolicita un n\u00famero y muestra su tabla de multiplicar:\npython tabla.py\nN\u00famero?7\n7 x 1 = 7\n7 x 2 = 14\n\u2026\n7 x 9 = 63\n7 x 10 = 70  Tablas de multiplicar\n\u25cfMuestra todas las tablas de multiplicar del 1 al 10:\npython tablas.py\n1 x 1 = 1\n1 x 2 = 2\n\u2026\n2 x 1 = 2\n2 x 2 = 4\n\u2026\n10 x 10 = 100  Factorial\n\u25cfRecibe un n\u00famero por teclado y calcula su \nfactorial:\npython factorial.py\nDime un n\u00famero: 5\n5!= 120  Calculadora\n\u25cfMuestra un men\u00fa con operaciones aritm\u00e9ticas b\u00e1sicas y \ncuando se elija una opci\u00f3n, solicita los operandos y realiza el \nc\u00e1lculo:\npython calculadora.py\nOpciones:\n1.Sumar      3.Multiplicar\n2.Restar     4.Dividir\nOpci\u00f3n?3\nPrimer operando?5\nSegundo operando?4\n5 x 4 = 20  Piedra-papel-tijera\n\u25cfJuega a piedra-papel-tijera contra el ordenador, al mejor de 3 partidas:\npython piedra.py\nJugada?1.Piedra\n2.Papel\n3.Tijera\nOpci\u00f3n?1\nTu eliges piedra y yo papel, t\u00fa ganas.\u2026\nTu has ganado 2 veces y yo 1, t\u00fa ganas.\u25cfNota: para generar un n\u00famero aleatorio empezando entre MIN y MAX:\nimport random\nprint(random.randint(MIN, MAX))  Frase\n\u25cfPide una frase por teclado y calcula el n\u00famero \nde espacios que contiene.python frase.py\nFrase: En un lugar de la Mancha\n5 espacios  Vocales\n\u25cfPide una frase en min\u00fasculas por teclado y \nmuestra la misma frase, cambiando las vocales \npor *.python vocales.py\nFrase: en un lugar de la mancha\n*n *n l*g*r d* l* m*nch*  Sumatorio\n\u25cfPide un n\u00famero por teclado y calcula el \nsumatorio desde 1 hasta ese n\u00famero.python sumatorio.py\nN\u00famero?7\n28  Producto\n\u25cfPide un n\u00famero por teclado y calcula el \nproducto desde 1 hasta ese n\u00famero.python p roducto.py\nN\u00famero?5\n120  Poker\n\u25cfMuestra todas las cartas de una baraja de poker:\npython poker.py\nAs de picas\n2 de picas\n3 de picas\n\u2026\nReina de corazones\nRey de corazones  Serie de Madhava-Leibniz\n\u25cfSolicita un n\u00famero de iteracciones para calcular PI por la serie de \nMadhava-Leibniz:\npython pi.py\nn?1\nPI = 2.66.\nn?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28170f9f-7089-4ffc-b2af-c32bc16b1258": {"__data__": {"id_": "28170f9f-7089-4ffc-b2af-c32bc16b1258", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7486cc26-ef20-404c-be4e-54a98e97ee27", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosBucles.pdf"}, "hash": "f6273109b8c89b0c08cfd47ad70508e64caaad49ef1701f10f7892fc2c2c2266", "class_name": "RelatedNodeInfo"}}, "text": "2\nPI = 3.46.\nn?3\nPI = 2.89.Fizzbuzz\n\u25cfMuestra los n\u00fameros del 1 al 100, pero en lugar \nde mostrar los m\u00faltiplos de 3, mostrar\u00e1s \u201cFizz\u201d \ny en lugar de los m\u00faltiplos de 5, mostrar\u00e1s \n\u201cBuzz\u201d.Cuando sean m\u00faltiplos de 3 y de 5, \nmostrar\u00e1s \u201cFizzBuzz\u201d.Reves\n\u25cfRecibe una frase por teclado y escr\u00edbela al \nrev\u00e9s.python reves.py\nFrase: Hola mundo\nodnum aloH  Primera\n\u25cfRecibe una frase por teclado y muestra solo la \nprimera palabra.python primera.py\nFrase: Hola mundo\nHola  Ultima\n\u25cfRecibe una frase por teclado y muestra solo la \n\u00faltima palabra.python ultima.py\nFrase: Hola mundo\nmundo  PrimerosPares\n\u25cfRecibe dos n\u00fameros, inicio y fin y muestra los 5 \nprimeros pares entre esos n\u00fameros.python primerospares.py\ninicio: 7\nfin: 50\n8 10 12 14 16  UltimosMultiplos5\n\u25cfRecibe dos n\u00fameros, inicio y fin y muestra los 3 \n\u00faltimos m\u00faltiplos de 5 entre esos n\u00fameros.python ultimosmultiplos5.py\ninicio: 7\nfin: 50\n50 45 40  Factoriales\n\u25cfRecibe dos n\u00fameros, inicio y fin y muestra los \nfactoriales de los n\u00fameros comprendidos entre \ninicio y fin.python factoriales.py\ninicio: 2\nfin: 5\n2\n6\n24\n120  Angry birds\n\u25cfDefine una distancia aleatoria entre 5 y 100 m para el cerdito y solicita la velocidad en \nm/s y el \u00e1ngulo en grados al jugador.Si el p\u00e1jaro pasa a menos de 1 m del cerdito, \npunto para el jugador.Si no, pierde un p\u00e1jaro (tiene 3 inicialmente):\nlongitud = (v02 * sen(2*angulo)) / g\npython angry.py\nEl cerdito est\u00e1 a 22 m.\nVelocidad?13\nAngulo?45\nHas avanzado 17.24 m, te has quedado a 4.76 m.\nTe quedan 2 p\u00e1jaros.Velocidad?15\nAngulo?45\n\u00a1Has avanzado 22.95 m y has dado al cerdito!Ganas 1 punto y vuelves a tener 3 p\u00e1jaros.El cerdito est\u00e1 a 57 m.\nVelocidad?34\nAngulo?33\n\u2026   Estad\u00edstica\n\u25cfRecibe 10 alturas en cm por teclado y calcula la media, la \ndesviaci\u00f3n t\u00edpica, el m\u00e1ximo y el m\u00ednimo:\npython estad\u00edstica.py\nAltura 1?157\nAltura 2?183\n\u2026\nAltura 10?177\nAltura media: 167.342.Desv.t\u00edpica: 23.47.Altura m\u00ednima: 157.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "801484b2-b7b0-4b81-bf15-f57f5766d140": {"__data__": {"id_": "801484b2-b7b0-4b81-bf15-f57f5766d140", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7486cc26-ef20-404c-be4e-54a98e97ee27", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosBucles.pdf"}, "hash": "f6273109b8c89b0c08cfd47ad70508e64caaad49ef1701f10f7892fc2c2c2266", "class_name": "RelatedNodeInfo"}}, "text": "Altura m\u00e1xima: 183.Penalty\n\u25cfTanda de penalties (al mejor de 5, si no hay empates) contra el ordenador:\npython penalty.py\nElige d\u00f3nde tirar:\n __________\n|2   3    4|\n|1        5|\nOpci\u00f3n?1\n\u00a1Has marcado gol!Vas ganando 1 \u2013 0.Elige d\u00f3nde parar:\n __________\n|2   3    4|\n|1        5|\nOpci\u00f3n?2\nTe han marcado gol.Vas empatando 1 \u2013 1....  Protecci\u00f3n por PIN\n\u25cfSolicita un PIN por teclado (4 d\u00edgitos) y muestra el saldo de la \ncuenta corriente solo si el usuario lo acierta en 3 intentos o \nmenos.Si no, muestra un error.python pin.py\nPIN: 1234\nPIN incorrecto.PIN: 2345\nPIN incorrecto.PIN: 2346\nPIN incorrecto.Tarjeta bloqueada.SMS\n\u25cfSolicita una frase y muestra las pulsaciones de teclado  \nnum\u00e9rico que hacen falta para escribirla:\npython sms.py\nFrase: Hola mundo\n44 \n666 \n555 \n2 \n6 \n88 \n66 \n3 \n666", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ca49d48-28e2-4f14-811c-d10177c6e499": {"__data__": {"id_": "8ca49d48-28e2-4f14-811c-d10177c6e499", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4572a799-7e0f-4f1f-b927-caadc7bb7e93", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosListas2.pdf"}, "hash": "526c66afc4cfb3cc0b72af1784c3c07d12e61d70c8332aa7675d4adb1242b303", "class_name": "RelatedNodeInfo"}}, "text": "  Programaci\u00f3n I\nEjercicios de listas y strings (II)\n \nPablo Garaizar Sagarminaga\nBorja Sanz Urquijo\nM.\u00aa Luz Guenaga G\u00f3mez\nJenny Fajardo Calder\u00edn\nFacultad de Ingenier\u00eda  Menos de 5\n\u25cfPrepara una lista con varias palabras y saca \npor pantalla otra lista que contenga solamente \nlas palabras de menos de 5 letras.python menosde5.py\n[\u201cplatano\u201d, \u201cpi\u00f1a\u201d, \u201cmanzana\u201d, \u201cluz\u201d]\n[\u201cpi\u00f1a\u201d, \u201cluz\u201d]  Divisibles\n\u25cfPrepara una lista de todos los n\u00fameros entre 1 \ny 100 que sean divisibles entre 2, 3 y 5 o 7.\npython divisibles.py\n[2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, \n15, 16, 18, 20, 21, 22, 24, 25, 26, \n27, 28, 30, 32, 33, 34, 35, 36, 38, \n39, 40, 42, 44, 45, 46, 48, 49, 50, \n51, 52, 54, 55, 56, 57, 58, 60, 62, \n63, 64, 65, 66, 68, 69, 70, 72, 74, \n75, 76, 77, 78, 80, 81, 82, 84, 85, \n86, 87, 88, 90, 91, 92, 93, 94, 95, \n96, 98, 99, 100]  Sin repetir\n\u25cfPrepara una lista con 100 n\u00fameros aleatorios \nde 1 a 50 y saca por pantalla otra lista que \ncontenga esos n\u00fameros pero sin repeticiones.python sinrepetir.py\n[18, 7, 21, 10, 2, 46, 20, 37, 34, 11, \n50, 36, 5, 6, 31, 49, 27, 29, 17, 41, \n25, 23, 44, 16, 13, 24, 15, 35, 22, \n30, 1, 28, 33, 32, 40, 39, 14, 47, 26, \n12, 48, 3, 42, 43, 19]  M\u00e1s larga\n\u25cfRecibe un texto por teclado y muestra por \npantalla la palabra m\u00e1s larga de ese texto.python maslarga.py\nTexto: En un lugar de la Mancha\nPalabra m\u00e1s larga: Mancha  Calificaciones\n\u25cfPrepara una lista con los nombres de tus \nasignaturas para este curso y pide por teclado \nlas calificaciones de cada una.Finalmente, \nmuestra por pantalla la calificaci\u00f3n media.python calificaciones.py\nIntroduce tu calificaci\u00f3n de Programaci\u00f3n: 7\nIntroduce tu calificaci\u00f3n de \u00c1lgebra: 5\nIntroduce tu calificaci\u00f3n de Electr\u00f3nica: 6\nIntroduce tu calificaci\u00f3n de C\u00e1lculo: 5\nIntroduce tu calificaci\u00f3n de Introducci\u00f3n a los Computadores: 9\nCalificaci\u00f3n media: 6.4  Segundo m\u00e1s barato\n\u25cfPrepara una lista con los precios de 10 \nproductos y recorre la lista para encontrar el 2\u00ba \nm\u00e1s barato.python barato.py\nPrecios: [123.50, 23.0, 12.99, 11.50, 67.40, 44.35, 111.0, 19.0, \n75.5, 99.99]\nSegundo m\u00e1s barato : 12.99  Sublista\n\u25cfPrepara dos listas de n\u00fameros de diferente \ntama\u00f1o y muestra si una lista est\u00e1 dentro de \notra lista.python sublista.py\nLista a: [1, 5, 7, 12, 3, 56, 11]\nLista b: [12, 3, 56]\nb es una sublista de a\nLista a: [1, 5, 7, 12, 3, 56, 11]\nLista b: [12, 56]\nb NO es una sublista de a  Morse\n\u25cfPrepara una lista con todas las letras del \nalfabeto y otra lista con sus equivalentes en \nc\u00f3digo Morse en el mismo orden.Recibe una \nfrase por teclado y mu\u00e9strala en c\u00f3digo Morse.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da2cc954-fa80-4745-8b47-0a50086b0dba": {"__data__": {"id_": "da2cc954-fa80-4745-8b47-0a50086b0dba", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4572a799-7e0f-4f1f-b927-caadc7bb7e93", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosListas2.pdf"}, "hash": "526c66afc4cfb3cc0b72af1784c3c07d12e61d70c8332aa7675d4adb1242b303", "class_name": "RelatedNodeInfo"}}, "text": "python morse.py\nFrase: hola\nMorse: .... --- .-.. .- .-.-.Ordenada\n\u25cfRecibe n\u00fameros por teclado e introd\u00facelos en \nuna lista.Cuando recibas un 0, deja de \nintroducir n\u00fameros en la lista y muestra si la \nlista est\u00e1 ordenada o no.python ordenada.py\nN\u00famero: 7\nN\u00famero: 11\nN\u00famero: 2\nN\u00famero: 0\n[7, 11, 2] no est\u00e1 ordenada  Insertar en orden\n\u25cfDefine una lista ordenada de n\u00fameros y pide \nun n\u00famero por teclado.Calcula la posici\u00f3n en \nla que deber\u00eda insertarse para que la lista siga \nordenada e ins\u00e9rtalo en la lista en esa posici\u00f3n.python insertar.py\nLista: [1, 13, 23, 53, 98]\nN\u00famero: 11\nEl n\u00famero 11 hay que insertarlo en la \nposici\u00f3n 1\nLista: [1, 11, 13, 23, 53, 98]  Dados\n\u25cfPide un n\u00famero n por teclado y simula n tiradas \nde un dado de 6 caras.Almacena en una lista \ncu\u00e1ntas veces sale cada n\u00famero y muestra sus \nporcentajes.python dados.py\nn: 50\nTiradas: [9, 11, 11, 12, 12, 7]\nEl 1 ha salido el 18% de las veces.El 2 ha salido el 22% de las veces.El 3 ha salido el 22% de las veces.El 4 ha salido el 24% de las veces.El 5 ha salido el 24% de las veces.El 6 ha salido el 14% de las veces.Helados\n\u25cfDefine una lista con sabores de helado y \nprepara una lista con todas las permutaciones \n(el orden importa) con repetici\u00f3n de helados de \n3 sabores.python helados.py\nSabores: [\u201cChocolate\u201d, \u201cVainilla\u201d, \u201cFresa\u201d, \u201cNata\u201d, \u201cLim\u00f3n\u201d]\nPosibles helados: [\n  [\u201cChocolate\u201d, \u201cChocolate\u201d, \u201cChocolate\u201d],\n  [\u201cChocolate\u201d, \u201cChocolate\u201d, \u201cVainilla\u201d],\n  [\u201cChocolate\u201d, \u201cChocolate\u201d, \u201cFresa\u201d],\n...\n]  Helados diferentes\n\u25cfDefine una lista con sabores de helado y \nprepara una lista con todas las permutaciones \n(el orden importa) sin repetici\u00f3n de helados de \n3 sabores.python heladosdiferentes.py\nSabores: [\u201cChocolate\u201d, \u201cVainilla\u201d, \u201cFresa\u201d, \u201cNata\u201d, \u201cLim\u00f3n\u201d]\nPosibles helados: [\n  [\u201cChocolate\u201d, \u201cVainilla\u201d, \u201cFresa\u201d],\n  [\u201cChocolate\u201d, \u201cVainilla\u201d, \u201cNata\u201d],\n  [\u201cChocolate\u201d, \u201cVainilla\u201d, \u201cLim\u00f3n\u201d],\n...\n]  Sin usar\n\u25cfPrepara una lista con varias palabras y saca \npor pantalla otra lista que contenga solamente \nlas letras del alfabeto que no hayan sido \nutilizadas en esas palabras.python sinusar.py\n[\u201cplatano\u201d, \u201cpi\u00f1a\u201d, \u201cmanzana\u201d, \u201cluz\u201d]\n[\u201cb\u201d, \u201cc\u201d, \u201cd\u201d, \u201ce\u201d, \u201cf\u201d, \u201cg\u201d, \u201ch\u201d, \n\u201cj\u201d, \u201ck\u201d, \u201cl\u201d, \u201cq\u201d, \u201cr\u201d, \u201cs\u201d, \u201cv\u201d, \n\u201cw\u201d, \u201cx\u201d, \u201cy\u201d]  Ahorcado\n\u25cfDefine una palabra secreta en el c\u00f3digo de tu programa y \npide por teclado letras hasta completar la palabra secreta.Muestra en todo momento las letras correctas y las letras \nincorrectas, as\u00ed como el n\u00famero de intentos y la palabra \nque est\u00e1 siendo adivinada con \u2013 en las letras a\u00fan no \nencontradas.python ahorcado.py\nLetra: a\na s\u00ed est\u00e1 en la palabra\nCorrectas: [\u201ca\u201d]\nIncorrectas: []\nIntentos: 1\nPalabra: --a-a--\n...  Fajardo S.A.\n\u25cfEl departamento de Recursos Humanos de una \nempresa cuenta con un listado de todos los \ntrabajadores de la empresa.De cada \ntrabajador se conoce su Nombre, \nDepartamento, Sexo, Salario:\nNombreDepartamento SexoSalario\nAna Dept1 F1500\nJuan Dept1 M1500\nMikel Dept2 M1300\nI\u00f1igo Dept3 M1700\nLaura Dept3 F1650\nIdoia Dept4 F1700\nMarkel Dept5 M1500  Fajardo S.A.\n\u25cfDe la informaci\u00f3n anterior necesitamos obtener \ndiferentes reportes:\n\u25cfDado un Departamento se necesita conocer el \nsalario promedio del sexo \u201cFemenino\u201d.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c7f59d6-3c5a-47b1-a820-725f1fcbe59f": {"__data__": {"id_": "0c7f59d6-3c5a-47b1-a820-725f1fcbe59f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4572a799-7e0f-4f1f-b927-caadc7bb7e93", "node_type": "4", "metadata": {"filename": "Prog1-02-EjerciciosListas2.pdf"}, "hash": "526c66afc4cfb3cc0b72af1784c3c07d12e61d70c8332aa7675d4adb1242b303", "class_name": "RelatedNodeInfo"}}, "text": "\u25cfConocer todos los trabajadores que tienen un \nsalario superior a 1500\u20ac.\u25cfObtener un listado con todos los trabajadores de \nsexo \u201cMasculino\u201d.\u25cfDado el nombre de un trabajador conocer el sexo, \nsalario y departamento al que pertenece.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab8cdeec-142b-4afc-965f-098bb3eb4c01": {"__data__": {"id_": "ab8cdeec-142b-4afc-965f-098bb3eb4c01", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9ce22730-2c0d-41be-8f2b-6c9098a902b2", "node_type": "4", "metadata": {"filename": "Prog1-02-PrimerosPasos.pdf"}, "hash": "d9e04bcc6453a75f9216b03b9efc14d8e417dd586afd0bac24ba447e677d1c6d", "class_name": "RelatedNodeInfo"}}, "text": "  Programaci\u00f3n I\nPrimeros pasos en Python\n \nPablo Garaizar Sagarminaga\nBorja Sanz Urquijo\nFacultad de Ingenier\u00eda  \u00cdndice\n\u25cfHola mundo.\u25cfVariables y tipos de datos.\u25cfEntrada/Salida b\u00e1sica.\u25cfCondicionales.\u25cfBucles.Hola mundo\n  El int\u00e9rprete de Python\n\u25cfEn otros lenguajes (ej: C):\n\u25cfProgramar \u2192 Compilar  \u2192 Ejecutar\n\u25cfEl c\u00f3digo fuente se convierte en binario antes de \nejecutar.\u25cfEn Python, normalmente:\n\u25cfProgramar \u2192 Interpretar  (Ejecutar)\n\u25cfEl c\u00f3digo fuente se interpreta y ejecuta al vuelo.Hola mundo en consola\npython\n>>> print('Hello world!')Hello world!Hola mundo en fichero\n\u25cfEn hola.py:\n# Mi primer programa\nprint('Hello world!')\u25cfInterpretar:\npython hola.py\nHello world!Hola mundo\n\u25cfprint() es una funci\u00f3n :\n\u25cfSus argumentos van entre par\u00e9ntesis .\u25cfImprime  por pantalla lo que le pasemos como \nargumento.Comentarios\n\u25cfEs muy importante comentar nuestro c\u00f3digo:\n\u25cfMejor explicar significado que sintaxis :\n\u2013Mal comentario: (a >= 65) # es a mayor que 65?\u2013Buen comentario: (a >= 65) # est\u00e1 jubilado?\u25cfComentar \u2192 Documentar .\u25cfC\u00f3mo:\n# Comentario de l\u00ednea\n\u2019\u2019\u2019 Bloque de comentario \u2019\u2019\u2019  \nVariables y tipos de datos  Variables\n\u25cfLos datos de un programa se almacenan en \nunas \u201ccajas\u201d  denominadas variables .\u25cfEn funci\u00f3n de qu\u00e9 queramos guardar, necesitamos \nuna tipo de caja u otra:\n\u2013N\u00famero entero \u2192 int\n\u2013N\u00famero decimal \u2192 float\n\u2013Frase \u2192 str\n\u2013L\u00f3gico \u2192 bool  Variables\n\u25cfEn Python los tipos son din\u00e1micos :\n\u25cfPuedes decir que la variable a es un entero y luego \nque es un booleano.a = 1\na = True  Variables\n\u25cfNombres de las variables :\n\u25cfNo pueden empezar por n\u00famero.\u25cfNo pueden contener caracteres especiales (!).\u25cfNo pueden contener espacios.\u25cfSi necesitamos varias palabras, usamos \ncamelCase :\npuntosExtraPorPeloteo = 4\nhttps://www.python.org/dev/peps/pep-0008/#naming-conventions  Variables\n\u25cfAsignaci\u00f3n m\u00faltiple:\na, b = 1, 2 # a = 1 y b = 2\na, b = b, a # intercambiamos los valores de a y b  Operadores aritm\u00e9ticos\n\u25cfSuma: 4 + 2\n\u25cfResta: 4 \u2013 2\n\u25cfMultiplicaci\u00f3n : 4 * 2\n\u25cfDivisi\u00f3n : 4 / 2\n\u25cfDivisi\u00f3n entera : 5 // 2\n\u25cfResto: 5 % 2\n\u25cfPotencia : 5 ** 2  Incremento / decremento\n\u25cfIncremento : \n\u25cfa = a + 1\n\u25cfa += 1\n\u25cfDecremento : \n\u25cfa = a - 1\n\u25cfa -= 1  Precedencia\n\u25cf\u00bfCu\u00e1nto es 5 * 3 + 2?\u25cfPEMDAS : \n1) Par\u00e9ntesis\n2) Exponentes\n3) Multiplicaciones y Divisiones \n4) Sumas y restas\nResultado: 17.N\u00fameros decimales\n\u25cfTambi\u00e9n suelen llamarse reales o de \u201ccoma \nflotante\u201d .\u25cfLas siguientes operaciones dan como resultado \nun float:\n\u25cfint / int.\u25cfCualquier operaci\u00f3n de int con float.\u25cfCualquier operaci\u00f3n de float con float.Booleanos\n\u25cfUna variable booleana solo puede ser True o False.\u25cfSon muy \u00fatiles para definir condiciones  en alternativas (if) o \nbucles (for, while, etc.).es_lunes = True\nif(es_lunes):\n  print('Aumentando las ganas de llorar')\nelse:\n  print('\u00a1\u00a1Ya queda menos para el viernes!!')Operadores booleanos\n\u25cfL\u00f3gicos :\n\u25cfAND: a and b\n\u25cfOR: a or b\n\u25cfNOT: not a\n\u25cfRelacionales :\n\u25cfIgual: == (ojo, DOS s\u00edmbolos de igualdad)\n\u25cfDistinto: !=\n\u25cfMayor: > Mayor o igual: >=\n\u25cfMenor: < Menor o igual: <=  Strings\n\u25cfSon \u201ccadenas de caracteres\u201d, es decir, palabras o \nfrases:\nnombre = \u201cKepa Sakolegi\u201d\n\u25cfPodemos acceder a un car\u00e1cter concreto usando \ncorchetes [ ]:\nprint(nombre[1])\n\u25cfLos \u00edndices empiezan en 0.\u25cfSi queremos empezar por el final \u2192 \u00edndices negativos.Strings\n\u25cfOperadores para strings:\n\u25cf+ \u2192 concatenar\nnombre = \u201cKepa\u201d + \u201cSakolegi\u201d\n\u25cf* \u2192 copiar n veces (entero)\nbatman = \u201cna\u201d * 20\n\u25cfin \u2192 \u00bfexiste esto dentro del string?\u201chola\u201d in \u201chola mundo\u201d # Devuelve True  Strings\n\u25cfFunciones interesantes:\nprint(s.capitalize()) # Primera letra en may\u00fasculas\nprint(s.lower()) # Todo a min\u00fasculas\nprint(s.upper()) # Todo a may\u00fasuculas\nprint(s.swapcase()) # Inversi\u00f3n \nprint(s.title()) #Primera letra de cada palabra en \nmay\u00fasculas\nprint(s.islower()) # Devuelve True si est\u00e1 en \nmin\u00fasculas  Strings\n\u25cfStrings con formato:\nprint(f\u2018El nombre de usuario \n{username} accedi\u00f3 al sistema el \n{fecha} por \u00faltima vez\u2019)\nhttps://realpython.com/python-string-formatting/    Conversi\u00f3n de tipos\n\u25cfExisten maneras de convertir un tipo de datos \nen otro:\n\u25cfPromociones (casting) : \nsuma = 12 + int(\u201c52\u201d)\n\u25cfCoerciones : los int se convierten autom\u00e1ticamente \na floats aunque no lo pidamos \nnota = 5.0 + 2  Listas\n\u25cfA veces, queremos guardar varios datos en un \nmismo sitio.\u25cfEn lugar de hacer esto:\nedad1 = 18\nedad2 = 19\nedad3 = 18\nedad4 = 17\nedad5 = 20\n\u25cfPodemos crear una lista as\u00ed:\nedades = [ 18, 19, 18, 17, 20 ];  Listas\n\u25cfCaracter\u00edsticas importantes de las listas en \nPython:\n\u25cfEst\u00e1n ordenadas .", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "061d24e7-95b1-4b6b-820a-b69ac8a6edaf": {"__data__": {"id_": "061d24e7-95b1-4b6b-820a-b69ac8a6edaf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9ce22730-2c0d-41be-8f2b-6c9098a902b2", "node_type": "4", "metadata": {"filename": "Prog1-02-PrimerosPasos.pdf"}, "hash": "d9e04bcc6453a75f9216b03b9efc14d8e417dd586afd0bac24ba447e677d1c6d", "class_name": "RelatedNodeInfo"}}, "text": "\u25cfPueden contener cualquier n\u00famero  de elementos \ny de distintos tipos.\u25cfLos elementos pueden accederse por su \u00edndice.\u25cfSe puede anidar listas dentro de otras listas.\u25cfSon mutables y din\u00e1micas, pueden cambiar .Listas\n\u25cfLos \u00edndices funcionan de forma parecida a los de los strings:\na = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']\n\u25cfTambi\u00e9n se pueden definir rangos ([inicio:fin]) o strides \n([inicio:fin:salto]):\nprint(a[0:3])\nprint(a[1:6:2])\n  Listas\n\u25cfSi no defines inicio o fin en un rango o stride, \nse entiende que empiezan desde 0 y terminan \nal final de la lista.\u25cfLlamadas interesantes:\nprint(lista[::-1]) # Imprime la lista de atr\u00e1s a delante\ncopia = lista[:] # Hace una copia de lista  Listas\n\u25cfTama\u00f1o: len, min, max\nprint(len(lista)) # Imprime el tama\u00f1o de la lista\n\u25cfInsertar en una lista:\nlista.append(\u2018mundo\u2019) # Al final\nlista.insert(2, \u2018hola\u2019) # En la posici\u00f3n 2\nlista.index(\u2018hola\u2019) # \u00bfEn qu\u00e9 posici\u00f3n est\u00e1 \u2018hola\u2019?\u25cfPertenencia: in\nprint(\u2018elemento\u2019 in lista) # True si est\u00e1 en la lista  Listas\n\u25cfOperaciones con listas:\n\u25cfInsertar:\nlista = lista + [\u2018hola\u2019, \u2018mundo\u2019] # Al final\nlista = [\u2018hola\u2019, \u2018mundo\u2019] + lista # Al principio\nlista[1:2] = [\u2018hola\u2019, \u2018mundo\u2019] # Entre el 2\u00ba y 3\u00ba \n\u25cfMultiplicar:\nlista = lista * 3 # Triplica los elementos de la lista  Listas anidadas\nx = ['a', ['bb', ['ccc', 'ddd'], 'ee', 'ff'], 'g', ['hh', 'ii'], 'j']\n  Constantes\n\u25cfHay valores que no son variables, ejemplo: PI.PI = 3.1415927\n\u25cfNormalmente, se nombran en todo en \nmay\u00fascula .Entrada/Salida b\u00e1sica  E/S b\u00e1sica\n  E/S b\u00e1sica\n\u25cfSalida :\n\u25cfFunci\u00f3n print()\nprint(\u201cAqu\u00ed va una l\u00ednea\\nAqu\u00ed un \\t tabulador\u201d)\n\u25cfEntrada :\n\u25cfFunci\u00f3n input()\nciudad = input(\u201cDime el nombre de la ciudad:\u201d)\ntemp = float(input(\u201cDime su temperatura:\u201d))  \nCondicionales  Condicionales\n\u25cfTambi\u00e9n llamadas \u201calternativas\u201d .\u25cfEstructuras que cambian el flujo de ejecuci\u00f3n \nde un programa.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0dcb2fac-5066-45c4-8f69-7d3f10ffc656": {"__data__": {"id_": "0dcb2fac-5066-45c4-8f69-7d3f10ffc656", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9ce22730-2c0d-41be-8f2b-6c9098a902b2", "node_type": "4", "metadata": {"filename": "Prog1-02-PrimerosPasos.pdf"}, "hash": "d9e04bcc6453a75f9216b03b9efc14d8e417dd586afd0bac24ba447e677d1c6d", "class_name": "RelatedNodeInfo"}}, "text": "\u25cfA veces hay que hacer A, otras veces, B.\u25cf\u00bfC\u00f3mo decidir?\u2192 en funci\u00f3n de una condici\u00f3n .if (puntos > 1000):\n  vidas = vidas + 1if (dinero < 0):\n  print(\u201cBancarrota\u201d)\nelse:\n  print(\u201cVamos de compras\u201d)  if\n  if-else\n  if encadenados\nif (edad < 4): \ntarifa = 0 # tarifa infantil\nelif (edad < 18): \ntarifa = 1 # tarifa juvenil\nelif (edad < 65): \ntarifa = 2 # tarifa adulta\nelse:\ntarifa = 3 # tarifa jubilaci\u00f3n  if encadenados\n  \nBucles  Bucles\n\u25cfHacer tareas repetitivas es la base de la \ncomputaci\u00f3n.\u25cfDiferentes formas de hacerlo:\n\u25cffor: de 0 a N veces, sabemos cu\u00e1ntas .", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "937a6a7c-458e-46cb-b9d6-ce8a2b9947b9": {"__data__": {"id_": "937a6a7c-458e-46cb-b9d6-ce8a2b9947b9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9ce22730-2c0d-41be-8f2b-6c9098a902b2", "node_type": "4", "metadata": {"filename": "Prog1-02-PrimerosPasos.pdf"}, "hash": "d9e04bcc6453a75f9216b03b9efc14d8e417dd586afd0bac24ba447e677d1c6d", "class_name": "RelatedNodeInfo"}}, "text": "\u25cfwhile: de 0 a N veces, a veces no sabemos  \ncu\u00e1ntas.while\nwhile (condici\u00f3n):\n  # c\u00f3digo-while\n\u25cfSi se cumple la condici\u00f3n, ejecutamos el bloque de \nc\u00f3digo dentro del while.\u25cfSi no, salimos.\u25cfEs habitual que dentro del c\u00f3digo-while haya algo que \nmodifique el valor de la condici\u00f3n.\u2013Si no \u2192 bucle infinito .while\n\u25cfEjemplo:\ni = 10\nwhile (i > 0):\n  print(i)\n  i = i - 1  while\n  for\nfor variable in lista:\n  # c\u00f3digo que usa \u201cvariable\u201d\n\u25cfEjemplos:\nfor numero in [0, 1, 2, 3, 4, 5]:\n    print(numero)\nfor numero in range(0, 6):\n    print(numero)  for\n  break y continue\n\u25cfbreak: rompe  el bucle, aunque no se cumpla la \ncondici\u00f3n de salida.\u25cfcontinue: deja de ejecutar esta vuelta del bucle, \npero contin\u00faa con la siguiente.break y else\n\u25cfSi vamos a romper un for o while con un break, podemos \nponer un else para cubrir el caso en el que no se ha \nsalido por break.\u25cfEjemplo: busco n\u00fameros pares en una lista\nfor numero in [23, 3, 67, 12, 55]:\n    if (numero % 2 == 0):\n        print(f\u2019{numero} es par\u2019)\n        break\nelse:\n    print(\u2018No hay n\u00fameros pares en la lista\u2019)  Referencias\n\u25cfJohn Sturtz, Real Python.\u25cfJohn M. Zelle.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0c8337e-3590-4749-ad49-17134e518e0f": {"__data__": {"id_": "c0c8337e-3590-4749-ad49-17134e518e0f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9ce22730-2c0d-41be-8f2b-6c9098a902b2", "node_type": "4", "metadata": {"filename": "Prog1-02-PrimerosPasos.pdf"}, "hash": "d9e04bcc6453a75f9216b03b9efc14d8e417dd586afd0bac24ba447e677d1c6d", "class_name": "RelatedNodeInfo"}}, "text": "Python Programming: An \nIntroduction to Computer Science.\u25cfWikipedia.Referencias\n\u25cfIm\u00e1genes:\n\u25cfWikipedia\n\u25cfChua Hock-Chuan, Yet another insignificant\u2026 programming \nnotes.\u25cfXKCD\n\u25cfhttps://www.flickr.com/photos/ruudhilgeman/6144979641  \n\u25cfhttps://www.flickr.com/photos/string_bass_dave/263222263  \n\u25cfhttps://www.flickr.com/photos/laenulfean/5943132296  \n\u25cfhttps://www.flickr.com/photos/pablo_javier/10127935845", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c30a1b0f-251a-40f7-a52b-b0c583cfdcf4": {"__data__": {"id_": "c30a1b0f-251a-40f7-a52b-b0c583cfdcf4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "42e46db8-62ed-4b42-8f60-916f07cfae52", "node_type": "4", "metadata": {"filename": "Prog1-03-EjerciciosSubprogramas.pdf"}, "hash": "2f480e49df2915d627ae25a3d9dd2a1ecec542892218017abd413748c9323fd6", "class_name": "RelatedNodeInfo"}}, "text": "  Programaci\u00f3n I\nEjercicios de subprogramas\n \nPablo Garaizar Sagarminaga\nBorja Sanz Urquijo\nFacultad de Ingenier\u00eda  Estrellas\n\u25cfPrograma la funci\u00f3n imprimeEstrellas(n):\nimprimeEstrellas(5);\n*****  Estrellas\n\u25cfPrograma la funci\u00f3n imprimeEstrellas(desde, \nhasta):\nimprimeEstrellas(2, 5);\n**\n***\n****\n*****  Tri\u00e1ngulo\n\u25cfPrograma la funci\u00f3n imprimeTriangulo(altura) \nque usa imprimeEstrellas(n):\nimprimeTriangulo(5);\n*\n**\n***\n****\n*****  Pir\u00e1mide\n\u25cfPrograma la funci\u00f3n imprimePiramide(altura) \nque usa imprimeEspacios(n) y \nimprimeEstrellas(n):\nimprimePiramide(5);\n    *\n   ***\n  *****\n *******\n*********  Primos\n\u25cfPrograma la funci\u00f3n esPrimo(n) que devuelve \nTrue si n es primo y False si no lo es.Factorial\n\u25cfPrograma la funci\u00f3n factorial(n) que devuelve el \nfactorial de n.  Fibonacci\n\u25cfPrograma la funci\u00f3n que calcule el valor \nen\u00e9simo de la serie de Fibonacci:\nfb(0) = 0\nfb(1) = 1\nfb(n) = fb(n-1)+fb(n-2).n = fibonacci(3) \n// n = fb(2)+fb(1) \u2192 n = fb(1) + fb(0) + fb(1)\n// n = 1 + 0 + 1 \u2192 n = 2  Calculadora\n\u25cfPrograma una calculadora que use las funciones \nsumar(op1, op2), double restar(op1, op2), double \nmultiplicar(op1, op2), double dividir(op1, op2) y menu():\n1.Sumar\n2.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "757b37e3-f9e2-4bbf-8184-077c486fc8dc": {"__data__": {"id_": "757b37e3-f9e2-4bbf-8184-077c486fc8dc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "42e46db8-62ed-4b42-8f60-916f07cfae52", "node_type": "4", "metadata": {"filename": "Prog1-03-EjerciciosSubprogramas.pdf"}, "hash": "2f480e49df2915d627ae25a3d9dd2a1ecec542892218017abd413748c9323fd6", "class_name": "RelatedNodeInfo"}}, "text": "Restar\n3.Multiplicar\n4.Dividir\nOpcion?1\nOperando 1: 10\nOperando 2: 21\nResultado: 31  Binario a decimal\n\u25cfPrograma un a funci\u00f3n que reciba un string con \nun n\u00famero binario y devuelva el n\u00famero entero \ncorrespondiente:\nn = binarioADecimal(\u201c1011\u201d) # n vale 11  Decimal a binario\n\u25cfPrograma un a funci\u00f3n que reciba un entero y \ndevuelva el n\u00famero binario correspondiente en \nun string:\nbinario = decimalABinario(6)\n# binario vale \u201c110\u201d  Dos y cuatro\n\u25cfPrograma una funci\u00f3n que reciba una lista de \nenteros y devuelva True si contiene un 2 o un \n4, pero no ambos:\n\u25cfdosYCuatro([1,2,3]) # True\n\u25cfdosYCuatro([3,4,5]) # True\n\u25cfdosYCuatro([1,3,5]) # False\n\u25cfdosYCuatro([1,2,3,4]) # False  Mayor array\n\u25cfPrograma una funci\u00f3n que reciba dos listas de \nenteros del mismo tama\u00f1o y devuelva True si \ncada elemento de la 1a lista es mayor que el \ncorrespondiente elemento en la 2a lista:\n\u25cfmayor([1,2,3], [0,1,2]) # True\n\u25cfmayor([7,5,3], [6,3,0]) # True\n\u25cfmayor([1,0,3], [0,1,2]) # False  Terminar igual\n\u25cfPrograma una funci\u00f3n que reciba dos listas de \nenteros y un entero n. Devolver\u00e1 True si la 1a \nlista termina igual que la 2a lista en los n \n\u00faltimos elementos:\n\u25cfterminarIgual([1,2,3,4], [0,1,3,4], 2) # True\n\u25cfterminarIgual([1,2,3,4], [0,2,3,4], 3) # True\n\u25cfterminarIgual([1,2,2,3,4], [0,1,2,3,4], 4) # False  Dos junto a dos\n\u25cfPrograma una funci\u00f3n que reciba una lista de \nenteros y devuelva True si hay un 2 junto a otro \n2, o false en caso contrario:\n\u25cfdosJuntoADos([1,2,2,4]) # True\n\u25cfdosJuntoADos([1,2,3,4]) # False\n\u25cfdosJuntoADos([1,2,3,2]) # False  Mayor diferencia\n\u25cfPrograma una funci\u00f3n que reciba una lista de \nenteros y devuelva la diferencia entre el \nn\u00famero m\u00e1s alto y el n\u00famero m\u00e1s bajo:\n\u25cfmayorDiferencia([5,2,3,2,6,3,4]) # 6-2 = 4\n\u25cfmayorDiferencia([1,1,1,4]) # 4-1 = 3  Rima\n\u25cfPrograma una funci\u00f3n que reciba dos string y \nun entero n y diga si riman, es decir, si son \niguales los n \u00faltimos caracteres:\n\u25cfrima(\u201ccarcasa\u201d, \u201cpasa\u201d, 2) # True\n\u25cfrima(\u201ccarcasa\u201d, \u201cpisa\u201d, 2)  # True\n\u25cfrima(\u201ccarcasa\u201d, \u201cpisa\u201d, 3)  # False  Suma d\u00edgitos\n\u25cfPrograma una funci\u00f3n que reciba un string  y \ndevuelva la suma de los d\u00edgitos que contiene \n(cero si no contiene ninguno):\n\u25cfsumaDigitos(\u201cc1a2sa\u201d) # 3\n\u25cfsumaDigitos(\u201cc1a2r4c5a6\u201d) # 18\n\u25cfsumaDigitos(\u201ccasa\u201d) // 0  Parsea entero\n\u25cfPrograma una funci\u00f3n que reciba un string  y \ndevuelva el entero correspondiente de juntar \ntodos los d\u00edgitos que contiene (cero si no \ncontiene ninguno):\n\u25cfparseaEntero(\u201cc1a2sa\u201d) # 12\n\u25cfparseaEntero(\u201cc1a2r4c5a6\u201d) # 12456\n\u25cfparseaEntero(\u201ccasa\u201d) # 0  Borra letras\n\u25cfPrograma una funci\u00f3n que reciba dos string y \ndevuelva el primero de ellos despu\u00e9s de \nhaberle quitado todos los caracteres del \nsegundo:\n\u25cfborraLetras(\u201cmurcielago\u201d, \u201caeiou\u201d) # \u201cmrclg\u201d\n\u25cfborraLetras(\u201ccama\u201d, \u201ccoche\u201d) # \u201cama\u201d\n\u25cfborraLetras(\u201ccarcasa\u201d, \u201cca\u201d) # \u201crs\u201d  Rachas\n\u25cfPrograma una funci\u00f3n que reciba una lista de \nenteros y devuelva el n\u00famero de rachas que \ncontiene (dos o m\u00e1s veces el mismo n\u00famero \nseguido):\n\u25cfrachas([1,2,3,4,5,6]) # 0\n\u25cfrachas([1,1,3,4,5,6]) # 1\n\u25cfrachas([1,1,3,4,4,6]) # 2\n\u25cfrachas([1,1,1,1,5,6]) # 1\n\u25cfrachas([1,1,3,3,5,6,6]) # 3  Partible\n\u25cfPrograma una funci\u00f3n que reciba una lista de \nenteros y devuelva True si existe una manera \nde dividir en dos partes la lista tal que los \nn\u00fameros de una parte sumen lo mismo que los \nde la otra:\n\u25cfpartible([1,1]) # parto por la mitad 1 = 1 \u2192 True\n\u25cfpartible({1,1,2]) # parto por el 2\u00ba, 1+1 = 2 \u2192 True\n\u25cfpartible([1,2,1,4,1]) # parto por el 3\u00ba, 1+2+1 = 4 +1 \n\u2192 True\n\u25cfpartible([7,5,1,4,1]) # False  Ahorcado\n\u25cfJuego del ahorcado, con las siguientes \nfunciones:\n\u25cfelegirPalabra() \u2192 elegir aleatoriamente una palabra \nde una lista de palabras\n\u25cfpedirLetra() \u2192 pedir letra al jugador\n\u25cfcomprobarLetra(palabra, letra) \u2192 comprobar si la \nletra pertenece a la palabra (True) o no (False)\n\u25cfpintarAhorcado() \u2192 dibujar el estado actual  Ahorcado\n\u25cfjava Ahorcado\nPalabra: _ _ _ _ _\nLetra?m\n\u00a1La letra m s\u00ed pertenece a la palabra!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69378cdc-12e3-4e2f-91f5-d4eba5725c69": {"__data__": {"id_": "69378cdc-12e3-4e2f-91f5-d4eba5725c69", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "42e46db8-62ed-4b42-8f60-916f07cfae52", "node_type": "4", "metadata": {"filename": "Prog1-03-EjerciciosSubprogramas.pdf"}, "hash": "2f480e49df2915d627ae25a3d9dd2a1ecec542892218017abd413748c9323fd6", "class_name": "RelatedNodeInfo"}}, "text": "Palabra: M _ _ _ _\nLetras correctas: M\nLetra?x\n\u00a1La letra x NO pertenece a la palabra!Palabra: M _ _ _ _\nLetras correctas: M\nLetras incorrectas: X\n___\nLetra?V\n\u00a1La letra x NO pertenece a la palabra!Palabra: M _ _ _ _\nLetras correctas: M\nLetras incorrectas: X V\n |\n |\n_|_  Tres en raya\n\u25cfJuego en el que habr\u00e1 una variable booleana \npara decidir a qui\u00e9n le toca jugar (CPU o ser \nhumano) y los siguientes m\u00e9todos:\n\u25cfprintBoard\n\u25cfselectCellCPU \u2192 \u00bfc\u00f3mo hacemos la IA?\u25cfselectCellHuman\n\u25cfcheckWinner  Tres en raya\n\u25cfjava TicTacToe\nMi turno:\n[ ][ ][ ]\n[ ][X][ ]\n[ ][ ][ ]\nTu turno.Introduce fila y columna: 1 1\n[O][ ][ ]\n[ ][X][ ]\n[ ][ ][ ]\nMi turno:\n[O][ ][ ]\n[ ][X][ ]\n[ ][X][ ]\nTu turno.Introduce fila y columna: 1 2\n[O][O][ ]\n[ ][X][ ]\n[ ][X][ ]  Hundir la flota\n\u25cfJuego en el que habr\u00e1 1 tablero de 10x10 para \ncada jugador donde se colocar\u00e1n de forma \nvertical u horizontal los siguientes barcos:\n\u25cf1 portaaviones (5 casillas).\u25cf2 destructores (4 casillas).\u25cf3 buques (3 casillas).\u25cf5 lanchas (1 casilla).\u25cfLos barcos propios tendr\u00e1n que estar al menos a \nuna casilla de distancia entre s\u00ed.Hundir la flota\n\u25cfImplementaci\u00f3n:\n\u25cf4 listas de juego: \n\u2013boardShipsCPU, boardShotsCPU.\u2013boardShipsHuman, boardShotsHuman.\u25cfFunciones:\n\u2013placeShipsCPU\n\u2013placeShipsHuman\n\u2013shootCPU\n\u2013shootHuman\n\u2013printBoardsHuman\n\u2013checkWinner    Switch off!\u25cfJuego en el que se dispone una matriz de 8x8 \ncon luces encendidas y apagadas.Cada vez \nque se elige una celda, se cambia de estado \nlas luces de arriba, abajo, izquierda y derecha \n(si las hubiera).El objetivo es apagarlas todas.\u25cfSer\u00eda bueno tener una lista de niveles, empezando \ncon el m\u00e1s f\u00e1cil y aumentando la complejidad.Switch off!\u25cfjava Switch\n   1  2  3  4  5  6  7  8\n1 [ ][ ][ ][ ][ ][ ][ ][ ]\n2 [ ][ ][ ][ ][ ][ ][ ][ ]\n3 [ ][ ][ ][*][ ][ ][ ][ ]\n4 [ ][ ][*][ ][*][ ][ ][ ]\n5 [ ][ ][ ][*][ ][ ][ ][ ]\n6 [ ][ ][ ][ ][ ][ ][ ][ ]\n7 [ ][ ][ ][ ][ ][ ][ ][ ]\n8 [ ][ ][ ][ ][ ][ ][ ][ ]\nFila y columna?4 4\n   1  2  3  4  5  6  7  8\n1 [ ][ ][ ][ ][ ][ ][ ][ ]\n2 [ ][ ][ ][ ][ ][ ][ ][ ]\n3 [ ][ ][ ][ ][ ][ ][ ][ ]\n4 [ ][ ][ ][ ][ ][ ][ ][ ]\n5 [ ][ ][ ][ ][ ][ ][ ][ ]\n6 [ ][ ][ ][ ][ ][ ][ ][ ]\n7 [ ][ ][ ][ ][ ][ ][ ][ ]\n8 [ ][ ][ ][ ][ ][ ][ ][ ] \n\u00a1Lograste apagar todas las luces!El juego de la vida de Conway\n\u25cfDefinir un patr\u00f3n inicial de celdas vivas y \nmuertas en una lista de 20x20.En un bucle \ninfinito, calcular las siguientes generaciones:\n\u25cfSi una celda est\u00e1 viva y tiene menos de 2 vecinas \nvivas, muere.\u25cfSi una celda est\u00e1 viva y tiene m\u00e1s de 3 vecinas, \nmuere de superpoblaci\u00f3n.\u25cfSi una celda est\u00e1 muerta y tiene exactamente 3 \nvecinas vivas, revive.El juego de la vida de Conway", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8762eef-1e58-4257-8602-b5bb81c8cda0": {"__data__": {"id_": "a8762eef-1e58-4257-8602-b5bb81c8cda0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "66257f9d-d499-4608-a2d7-23876d9e75ea", "node_type": "4", "metadata": {"filename": "Prog1-03-ProgModular.pdf"}, "hash": "1d77fca8444494e8ba5246a424fb26bd222c7fbb19483a08d29656dd333f94e3", "class_name": "RelatedNodeInfo"}}, "text": "  Programaci\u00f3n I\nProgramaci\u00f3n modular\n \nPablo Garaizar Sagarminaga\nBorja Sanz Urquijo\nFacultad de Ingenier\u00eda  \u00cdndice\n\u25cfUn poco de historia.\u25cfSubprogramas.Un poco de historia  Historia\n\u25cfA\u00f1os 60 del s. XX: \n\u25cfProgramaci\u00f3n en c\u00f3digo m\u00e1quina  (binario).\u25cfEnsamblador  (mnem\u00f3nicos traducidos a binario).\u25cfLenguajes con saltos incondicionales  (GOTO).\u2013C\u00f3digo \u201cspaghetti\u201d  \u2192 Dif\u00edcil de mantener.Historia\n\u25cf1968, Edgser Dijkstra: \u201cGo To Statement \nConsidered Harmful\u201d .\u25cfProgramaci\u00f3n estructurada  \u2192 Todo c\u00f3digo tiene \nque ser:\n\u2013Secuencia : ejecuci\u00f3n de una instrucci\u00f3n tras otra.\u2013Selecci\u00f3n : ejecuci\u00f3n de una secuencia u otra, seg\u00fan el \nvalor de una variable booleana (if).\u2013Iteraci\u00f3n : ejecuci\u00f3n de una secuencia mientras una \nvariable booleana sea 'verdadera' (for, while, etc.).Programaci\u00f3n estructurada\n  Programaci\u00f3n modular\n\u25cfEvoluci\u00f3n de la programaci\u00f3n estructurada \npara resolver problemas m\u00e1s grandes .\u25cf\u201cDivide y vencer\u00e1s\u201d\n\u2013Problema complejo \u2192 subproblemas m\u00e1s simples \u2192 \ndividir otra vez hasta que sea f\u00e1cil resolver cada parte \u2192 \nm\u00f3dulos .\u25cfEvitar copiar c\u00f3digo \u2192 smells!\u25cfFomentar la reutilizaci\u00f3n de c\u00f3digo.M\u00f3dulos\n\u25cfUn m\u00f3dulo tiene una tarea definida.\u25cfPuede que necesite de otros para llevarla a cabo.\u25cfTambi\u00e9n llamados:\n\u25cfSubrutinas.\u25cfSubprogramas.\u25cfProcedimientos.\u25cfFunciones .\u25cfM\u00e9todos  \u2192 nombre preferido en POO.\u25cf,,,  \nFunciones  Funciones\n\u25cfElementos importantes:\n\u25cf\u00c1mbito : \u00bfqui\u00e9n puede llamar a este m\u00f3dulo?\u25cfTipo de dato de retorno : \u00bfqu\u00e9 devuelve?\u25cfArgumentos : \u00bfqu\u00e9 datos necesita?\u25cfC\u00f3digo : \u00bfc\u00f3mo obtiene el resultado a partir de los \nargumentos?Funciones\n\u25cfEjemplo:\ndef promedio (a, b):\nreturn (a + b) / 2\n\u25cf\u00c1mbito : p\u00fablico\n\u25cfTipo de datos de retorno : float\n\u25cfArgumentos : a (int), b (int)  Funciones\n  Funciones: retorno\n\u25cfUna funci\u00f3n siempre devolver\u00e1 una cosa:\n\u25cfSi la funci\u00f3n no devuelve nada: no tiene  return \u2192 \ndevuelve None\n\u25cfSi devuelve una cosa (ej: un entero): return \nentero.\u25cfSi necesitamos que devuelva m\u00e1s de un dato:\n\u2013Puede devolver una lista u otra estructura de memoria \nque permita guardar varias cosas (ejemplo: tupla).Tuplas\n\u25cfUna tupla es algo parecido a una lista \ninmutable :\n\u25cfAgrupa varios valores de manera ordenada .\u25cfEjemplo:\nposicion = (1.5, 3.1, 0.6)  Funciones: retorno\n\u25cfEjemplo de funci\u00f3n que devuelve varios  \nvalores en una tupla:\ndef firstLast (text):\n    return text[0], text[-1]\n>>> print(firstLast(\u2018Hola mundo cruel\u2019))\n(\u2018H\u2019, \u2018l\u2019)  Funciones: argumentos\n\u25cfUna funci\u00f3n puede tener de 0 a N argumentos.\u25cfArgumentos por defecto:\ndef saludar(nombre, saludo=\u201dHola\u201d):\n    print(f\u2019\u00a1{saludo} {nombre}!\u2019)\n\u25cfArgumentos por palabras clave (keywords):\ndef fecha(dia, mes, anyo):\n    print(f\u2019{dia}/{mes}/{anyo}\u2019)\n>>> fecha(mes=11, dia=22, anyo=2021)  Funciones: argumentos\n\u25cfSi queremos que tenga un n\u00famero indefinido  \nde argumentos:\ndef sumatorio(*nums):\n    suma = 0\n    for num in nums:\n        suma = suma + num\n    return suma\n# nums se comporta como una tupla  Funciones: \u00e1mbito\n\u25cfLas variables definidas dentro de una funci\u00f3n solo pueden \naccederse en ese \u00e1mbito:\ndef sumatorio(*nums):\n    suma = 0\n    for num in nums:\n        suma = suma + num\n    return suma\n>>> print(suma)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'suma' is not defined  Funciones built-in\n\u25cfEn Python hay muchas funciones que no tenemos que \nprogramar, est\u00e1n ya programadas (built-in):\n  M\u00f3dulos\n\u25cfAdem\u00e1s de las funciones built-in, hay programadas muchas otras funciones \ndentro de m\u00f3dulos que podemos importar:\nfrom nombreModulo import funcion\n  Llamadas encadenadas\n\u25cfDentro  de una funci\u00f3n, se puede llamar a \notras funciones:\n\u25cfEjemplo:\ndef multiplicar (a, b):\n    resultado = 0\n    while (b > 0):\n        resultado = sumar(resultado, a)\n        b--  Recursividad\n\u25cfTambi\u00e9n llamada recursi\u00f3n o recurrencia.\u25cfUn m\u00e9todo puede llamarse a s\u00ed mismo :\n\u25cfSi se hace mal \u2192 desbordamiento de pila ( stack \noverflow ).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81a25092-59ea-466a-a364-cd235c4d5fd7": {"__data__": {"id_": "81a25092-59ea-466a-a364-cd235c4d5fd7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "66257f9d-d499-4608-a2d7-23876d9e75ea", "node_type": "4", "metadata": {"filename": "Prog1-03-ProgModular.pdf"}, "hash": "1d77fca8444494e8ba5246a424fb26bd222c7fbb19483a08d29656dd333f94e3", "class_name": "RelatedNodeInfo"}}, "text": "\u25cfSi se hace bien \u2192 recursividad .\u2013Dif\u00edcil, pero elegante :)  Recursividad\n\u25cfEjemplo: factorial iterativo\ndef factorial(n) :\n    resultado = 1\n    for i in range(1, n+1):\n        resultado *= i\n    return resultado  Recursividad\n\u25cfEjemplo: factorial recursivo\ndef factorial(n):\n  if (n==0):\n    return 1\n  else:\n    return n * factorial(n-1)  Referencias\n\u25cfJohn Sturtz, Real Python.\u25cfJohn M. Zelle.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5174d234-6367-4691-9765-f648a9ce4829": {"__data__": {"id_": "5174d234-6367-4691-9765-f648a9ce4829", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "66257f9d-d499-4608-a2d7-23876d9e75ea", "node_type": "4", "metadata": {"filename": "Prog1-03-ProgModular.pdf"}, "hash": "1d77fca8444494e8ba5246a424fb26bd222c7fbb19483a08d29656dd333f94e3", "class_name": "RelatedNodeInfo"}}, "text": "Python Programming: An \nIntroduction to Computer Science.\u25cfLearnbyexample.org.\u25cfWikipedia.Referencias\n\u25cfIm\u00e1genes:\n\u25cfWikipedia\n\u25cfChua Hock-Chuan, Yet another insignificant\u2026 programming \nnotes.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bb154ac-9d13-402a-bead-a6fec122e3de": {"__data__": {"id_": "0bb154ac-9d13-402a-bead-a6fec122e3de", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc594f1a-e4d0-4f01-83c0-a4a91698bb44", "node_type": "4", "metadata": {"filename": "Prog1-04-Datos.pdf"}, "hash": "f2e7a9943a2327e85a39d4119de7db1bfd92d6875e3d0c78e2dfcbe9e2477944", "class_name": "RelatedNodeInfo"}}, "text": "  Programaci\u00f3n I\nManejo avanzado de datos\n \nPablo Garaizar\nBorja Sanz Urquijo\nM.\u00aa Luz Guenaga\nJenny Fajardo\nFacultad de Ingenier\u00eda  \u00cdndice\n\u25cfListas multidimensionales.\u25cfDiccionarios.\u25cfFicheros.Listas multidimensionales  Listas multidimensionales\n\u25cfPython permite a\u00f1adir listas a listas  para crear \nlistas multidimensionales.\u25cfEjemplo de lista bidimensional :\ntabla = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]\n1 2 3\n4 5 6\n7 8 9tabla[0][0]\ntabla[1][0]\ntabla[2][0]tabla[0][0] tabla[0][1] tabla[0][2]  19 20 21\n22 23 24\n25 26 2710 11 12\n13 14 15\n16 17 18Listas multidimensionales\n\u25cfEjemplo de lista tridimensional :\ncubo = [ [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ],\n       [ [10, 11, 12], [13, 14, 15], [16, 17, 18] ], \n       [ [19, 20, 21], [22, 23, 24], [25, 26, 28] ] ]\n1 2 3\n4 5 6\n7 8 9cubo[0][0][0]\ncubo[0][1][0]\ncubo[0][2][0]cubo[1][0][0]cubo[2][0][0]  Listas multidimensionales\n\u25cfPara recorrer  las listas multidimensionales se \nsuelen utilizar bucles anidados :\nfor fila in tabla:\n  for elemento in fila:\n    print(elemento)\nfor i in range(len(tabla)):\n  for j in range(len(tabla[i])):\n    print(tabla[i][j])  \nDiccionarios  Diccionarios\n\u25cfUn diccionario  es como una lista en la que los \u00edndices \nno son num\u00e9ricos  sino que pueden ser de otros tipos .\u25cfTambi\u00e9n se conocen como mapas (clave, valor).\u25cfImportante : las claves o \u00edndices son \u00fanicos.\u25cfEjemplo:\npoblaciones = { \u2018Francia\u2019: 67407241, \u2018Alemania\u2019: 83149300, \n\u2018Espa\u00f1a\u2019: 47450795 }\n> print(poblaciones[\u2018Francia\u2019])\n> 67407241  Diccionarios\n\u25cfPara asignar un valor a una clave o \u00edndice, se hace de manera \nsimilar a las listas:\npoblaciones[\u2018Francia\u2019] = 67407241\n\u25cfSi queremos saber si una clave est\u00e1 en un diccionario, podemos \nusar el operador in:\n> \u2018Francia\u2019 in poblaciones\n> True\n\u25cfPara eliminar una clave del diccionario, podemos usar del:\nif \u2018Francia\u2019 in poblaciones:\n    del poblaciones[\u2018Francia\u2019]  Diccionarios\n\u25cfPara recorrer un diccionario, lo m\u00e1s habitual es recorrer sus \nclaves:\nfor pais in poblaciones:\n    print(poblaciones[pais])\n\u25cfTambi\u00e9n podemos recorrer solo sus valores:\nfor poblacion in poblaciones.values():\n    print(poblacion)\n\u25cfO utilizar iteritems  para tener las dos cosas: \nfor clave, valor in poblaciones.iteritems():\n    print(clave, valor)  \nFicheros  Ficheros\n\u25cfLos ficheros sirven para dotar de persistencia \na nuestros programas ( guardar  datos para \nleerlos  m\u00e1s adelante).\u25cfOperaciones habituales:\n\u25cfCrear / abrir fichero.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3ec67a6-1259-42a7-94cc-e035a844328e": {"__data__": {"id_": "d3ec67a6-1259-42a7-94cc-e035a844328e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc594f1a-e4d0-4f01-83c0-a4a91698bb44", "node_type": "4", "metadata": {"filename": "Prog1-04-Datos.pdf"}, "hash": "f2e7a9943a2327e85a39d4119de7db1bfd92d6875e3d0c78e2dfcbe9e2477944", "class_name": "RelatedNodeInfo"}}, "text": "\u25cfLeer datos desde fichero.\u25cfEscribir  datos en fichero.\u25cfCerrar fichero.Abrir ficheros\n\u25cfUsamos open para abrir un fichero, indicando:\n\u25cfLa ruta al fichero: \u201cfichero.txt\u201d.\u25cfEl modo de acceso:\n  Abrir ficheros\n\u25cfopen() devuelve una referencia al fichero, que usaremos \ndespu\u00e9s para leer y escribir en \u00e9l:\nfichero = open(\u2018fichero.txt\u2019, \u2018r\u2019)\nfor linea in fichero:\nprint(linea)\n\u25cfHabitualmente, se usa with para englobar todas las \nsentencias que usan el fichero:\nwith open(\u2018fichero.txt\u2019, \u2018r\u2019) as fichero:\n   for linea in fichero:\n   print(linea)  Leer ficheros\n\u25cfread lee el fichero entero como una cadena de texto:\nfichero = open(\u2018fichero.txt\u2019, \u2018r\u2019)\ndatos = fichero.read()\nprint(datos)\n\u25cfreadlines  devuelve las l\u00edneas del fichero en una lista :\nfichero = open(\u2018fichero.txt\u2019, \u2018r\u2019)\ndatos = fichero.readlines()\nprint(datos)  Leer ficheros\n\u25cfEs muy habitual utilizar un for para procesar \ncada l\u00ednea del fichero:\nfichero = open(\u2018fichero.txt\u2019, \u2018r\u2019)\nfor linea in fichero:\n   print(linea)  Escribir ficheros\n\u25cfwrite escribe datos en un fichero:\nfichero = open(\u2018fichero.txt\u2019, \u2018w\u2019)\ndatos = \u2018Quiero guardar estos datos\u2019\nfichero.write(datos)\nfichero.write(\u2018Otros datos\u2019)  Escribir ficheros\n\u25cf\u00bfD\u00f3nde se escribe?Donde est\u00e9 el puntero de lectura/escritura.\u25cfSe define al abrir el fichero: \n\u2013r/w: al principio del fichero.\u2013a: append, al final del fichero.\u25cfSe puede modificar con seek(salto, comienzo) , donde 0 es al principio y 2 \nes al final:\nfichero = open(\u2018fichero.txt\u2019, \u2018a+\u2019)\ndatos = \u2018Guardo estos datos al final\u2019\nfichero.write(datos)\nfichero.seek(0, 0)\nfichero.write(\u2018Y esto otro al principio, sobrescribiendo\u2019)\nfichero.seek(0, 2)\nfichero.write(\u2018Volvemos al final\u2019)  Cerrar ficheros\n\u25cfclose cierra el fichero (\u00a1es importante hacerlo!):\nfichero = open(\u2018fichero.txt\u2019, \u2018w\u2019)\ndatos = \u2018Quiero guardar estos datos\u2019\nfichero.write(datos)\nfichero.close()  Otras operaciones\n\u25cfEl sistema operativo es quien se encarga de otras operaciones como borrar \no renombrar ficheros.\u25cfHay que importar el m\u00f3dulo os :\nimport os\nif os.path.isfile(\u2018fichero.txt\u2019):\n   os.rename(\u2018fichero.txt\u2019, 'saludo.txt')\nelse:\n   print(\u2018fichero.txt no existe\u2019)\nif os.path.isfile(\u2018saludo.txt\u2019):\n   os.remove(\u2018saludo.txt')\nelse:\n   print(\u2018saludo.txt no existe\u2019)  Internet\n\u25cfPara leer ficheros desde Internet hay que importar el \nm\u00f3dulo urllib :\nimport urllib\nfichero = urllib.request.urlopen('https://\u2026')\ndatos = fichero.read()\nprint(datos.decode('utf-8'))\n# la mayor\u00eda de p\u00e1ginas web est\u00e1n codificadas en utf-8\n# por eso el decode(\u2018utf-8\u2019)  Referencias\n\u25cfhttps://www.snakify.org/es/lessons/dictionaries_dicts/ \n\u25cfhttps://jarroba.com/lectura-y-escritura-de-ficheros-\nen-python-con-ejemplos/\n\u25cfhttps://aprendeconalf.es/docencia/python/manual/\nficheros/\n\u25cfJohn Sturtz, Real Python.\u25cfJohn M. Zelle.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a79e4c05-39a6-469f-90d7-27480a0e9299": {"__data__": {"id_": "a79e4c05-39a6-469f-90d7-27480a0e9299", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc594f1a-e4d0-4f01-83c0-a4a91698bb44", "node_type": "4", "metadata": {"filename": "Prog1-04-Datos.pdf"}, "hash": "f2e7a9943a2327e85a39d4119de7db1bfd92d6875e3d0c78e2dfcbe9e2477944", "class_name": "RelatedNodeInfo"}}, "text": "Python Programming: An Introduction \nto Computer Science.\u25cfLearnbyexample.org.\u25cfWikipedia.Referencias\n\u25cfIm\u00e1genes:\n\u25cfhttps://www.flickr.com/photos/stockcatalog/43194359892/\n\u25cfhttps://www.flickr.com/photos/takashi/18862634/  \n\u25cfhttps://www.flickr.com/photos/takashi/18862634/", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e0588a9-e3a2-4d97-b3e0-19668680584b": {"__data__": {"id_": "1e0588a9-e3a2-4d97-b3e0-19668680584b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a3021ab9-59c4-43a9-ba64-6883769b3ef7", "node_type": "4", "metadata": {"filename": "Prog1-04-EjerciciosDatos.pdf"}, "hash": "ed682732cc0468a3a78977a2172b74b45cd5babefcde012f4fc8a424a4e61bd7", "class_name": "RelatedNodeInfo"}}, "text": "  Programaci\u00f3n I\nEjercicios de manejo avanzado de \ndatos\n \nPablo Garaizar\nBorja Sanz Urquijo\nM.\u00aa Luz Guenaga\nJenny Fajardo\nFacultad de Ingenier\u00eda  Parking\n\u25cfCrear una lista multidimensional para \nalmacenar la informaci\u00f3n de ocupaci\u00f3n de un \nparking:\n  Filas\n\u25cfPrograma una funci\u00f3n que reciba un entero \ndimensi\u00f3n y devuelva una lista bidimensional de \nesa dimensi\u00f3n que tenga todo 1 en la primera fila, \ntodo 2 en la segunda, etc:\n[ [1, 1, 1],\n  [2, 2, 2],\n  [3, 3, 3] ]  Columnas\n\u25cfPrograma una funci\u00f3n que reciba un entero \ndimensi\u00f3n y devuelva una lista bidimensional de \nesa dimensi\u00f3n que tenga todo 1 en la primera \ncolumna, todo 2 en la segunda, etc:\n[ [1, 2, 3],\n  [1, 2, 3],\n  [1, 2, 3] ]  Matriz identidad\n\u25cfPrograma una funci\u00f3n que reciba un entero \ndimensi\u00f3n y devuelva una lista bidimensional \ncon la matriz identidad de esa dimensi\u00f3n:\n  Matrices\n\u25cfPrograma una funci\u00f3n que reciba dos matrices \nde las mismas dimensiones y devuelva la \nmatriz suma.\u25cfPrograma una funci\u00f3n que reciba dos matrices \ny devuelva la matriz producto.Limpia matrices\n\u25cfPrograma una funci\u00f3n que reciba una matriz y \ndevuelva la misma matriz eliminando las filas \ny/o columnas que tengan solo ceros:\n  \u00bfEs cuadrado m\u00e1gico?\u25cfPrograma una funci\u00f3n reciba una lista \nbidimensional y devuelva True si es un \ncuadrado m\u00e1gico (todas sus filas y columnas \nsuman lo mismo).Determinantes\n\u25cfPrograma una funci\u00f3n que reciba una matriz \nbidimensional de rango 3 y devuelva su \ndeterminante:\n\u25cfPrograma una funci\u00f3n que reciba cualquier \nmatriz cuadrada y devuelva su determinante.Letras o no\n\u25cfPrograma una funci\u00f3n que reciba una cadena \nde caracteres y devuelva una lista indicando si \nhay letras (a-z, A-Z) o no:\nletrasONo(\u2018abcd 12 ABC\u2019) \n[1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1]  Tipos de caracteres\n\u25cfPrograma una funci\u00f3n que reciba una cadena \nde caracteres y devuelva una lista indicando si \nson caracteres especiales (0), letras (1) o \nn\u00fameros (2):\ncaracteres(\u2018abcd 12 ABC ?!#\u2019) \n[1, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 0, 0, 0, 0]  Polinomios\n\u25cfCrea una lista de polinomios en la que cada \npolinomio ser\u00e1 una lista con los coeficientes en \norden.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cc25073-7696-46ed-9874-21f03ba0523c": {"__data__": {"id_": "2cc25073-7696-46ed-9874-21f03ba0523c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a3021ab9-59c4-43a9-ba64-6883769b3ef7", "node_type": "4", "metadata": {"filename": "Prog1-04-EjerciciosDatos.pdf"}, "hash": "ed682732cc0468a3a78977a2172b74b45cd5babefcde012f4fc8a424a4e61bd7", "class_name": "RelatedNodeInfo"}}, "text": "\u25cfPor ejemplo:\n[2, 3, -4, 0, 1] representa a  2 x4 + 3 x3 \u2013 4 x2 + 1\n\u25cfPrograma una funci\u00f3n que recibe todos los \npolinomios y devuelve una lista con la suma de \ntodos los polinomios.Facturas\n\u25cfCrea un diccionario donde la clave sea el c\u00f3digo \nde factura y el valor la cantidad pendiente de \ncobro.\u25cfPrograma una funci\u00f3n que reciba ese \ndiccionario y devuelva el total pendiente de \ncobro.\u25cfPrograma una funci\u00f3n que reciba ese \ndiccionario y devuelva la factura con mayor \nimporte.Morse\n\u25cfCrea un diccionario donde las claves sean \nletras y n\u00fameros y los valores sean su \nequivalente en c\u00f3digo Morse.\u25cfCrea una funci\u00f3n que reciba un texto y el \ndiccionario anteriormente creado y devuelva el \nmismo texto en c\u00f3digo Morse.Traducciones\n\u25cfCrea un diccionario donde las claves sean \npalabras en ingl\u00e9s y los valores sus \ntraducciones a castellano.\u25cfCrea una funci\u00f3n que reciba un texto en ingl\u00e9s \ny el diccionario anteriormente creado y \ndevuelva el mismo texto sustituyendo cada \npalabra encontrada en el diccionario por su \ncorrespondiente en castellano.Cuenta caracteres\n\u25cfPrograma una funci\u00f3n que reciba una cadena \nde caracteres y devuelva un diccionario con el \ntotal de veces que aparece cada car\u00e1cter:\ncuentaChars(\u2018abcd 11 abbb ?\u2019) \n{ \u2018a\u2019: 2, \u2018b\u2019: 4, \u2018c\u2019: 1, \u2018d\u2019: 1, \u2018 \u2018: 3, \u20181\u2019: 2, \u2018?\u2019: 1 }  Cuenta palabras\n\u25cfPrograma una funci\u00f3n que reciba una cadena \nde caracteres y devuelva un diccionario con el \ntotal de veces que aparece cada palabra:\ncuentaPalabras(\u2018hola hola que que hola adi\u00f3s\u2019) \n{ \u2018hola\u2019: 3, \u2018que\u2019: 2, \u2018adi\u00f3s\u2019: 1 }  Personajes\n\u25cfCrea un diccionario para almacenar la posici\u00f3n en pantalla \nde cada personaje en un videojuego.La clave ser\u00e1 el \nnombre del personaje y el valor ser\u00e1 un diccionario con un \nvalor para la clave x y otro para la clave y.\u25cfPrograma una funci\u00f3n que reciba el diccionario de \npersonajes y una posici\u00f3n (x, y) y devuelva el nombre del \npersonaje que est\u00e9 m\u00e1s cerca a esa posici\u00f3n.\u25cfPrograma una funci\u00f3n que reciba el diccionario de \npersonajes y devuelva un diccionario con los dos \npersonajes que se encuentran m\u00e1s cerca entre s\u00ed.Agenda\n\u25cfCrea un diccionario para almacenar los datos \nde una agenda de contactos (nombre, \napellidos, tel\u00e9fono, email).\u25cfPrograma funciones para gestionar las altas, \nbajas y modificaciones de la agenda.\u25cfPrograma funciones para buscar contactos por \nnombre y por tel\u00e9fono en la agenda.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e24141e0-bdaa-4909-8e06-37c6332cc910": {"__data__": {"id_": "e24141e0-bdaa-4909-8e06-37c6332cc910", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "552b0da3-0b2e-4b08-80b2-0c64760fb520", "node_type": "4", "metadata": {"filename": "Prog1-05-Depuracion.pdf"}, "hash": "ee94f0dff7fc84936bd1ffe4d29fffcbfa60ee14c37c423230c954374558a7b3", "class_name": "RelatedNodeInfo"}}, "text": "  Programaci\u00f3n I\nDepuraci\u00f3n de c\u00f3digo\n \nPablo Garaizar Sagarminaga\nBorja Sanz Urquijo\nFacultad de Ingenier\u00eda  \u00cdndice\n\u25cfIntroducci\u00f3n.\u25cfDepuraci\u00f3n troglodita.\u25cfDepuraci\u00f3n con fundamento.Introducci\u00f3n  Historia\n\u25cfBug (\u201cbicho\u201d) se usa como sin\u00f3nimo de error \ndesde el s. XIX.\u25cfLa primera en usarlo como error en inform\u00e1tica fue \nGrace Hopper en los a\u00f1os 1940.\u2013Desde esa \u00e9poca hab\u00eda m\u00e9todos para encontrar y \ncorregir errores de programaci\u00f3n.\u25cfLos programas interactivos para depurar errores \nde otros programas vienen us\u00e1ndose desde 1970 \n(ej: ODT: On-line Debugging Tool).Las 6 fases de la depuraci\u00f3n\n1) Eso no puede  ocurrir.2) Eso en mi ordenador  no ocurre.3) Eso no deber\u00eda  ocurrir.4) \u00bfPor qu\u00e9  ocurre eso?5) Oh, ya veo \u2026\n6) \u00bfC\u00f3mo  ha podido funcionar eso antes?Depuraci\u00f3n\n\u25cfEs importante porque nos pasamos m\u00e1s tiempo arreglando \nfallos que programando nuevas funcionalidades :\n  \nDepuraci\u00f3n troglodita  Depuraci\u00f3n troglodita\n\u25cfA pesar de que no es nada recomendable , es \nmejor que no depurar.\u25cf\u00bfC\u00f3mo?\u25cfLlenando el c\u00f3digo de mensajes informativos :\nEjemplo:\nfor i in range(10):\n  print(\u201cVoy por la vuelta\u201d + i) # Debug\n  hacerCosas(i)  Depuraci\u00f3n troglodita\n\u25cfOtro truco cl\u00e1sico es poner una pausa  en el \nprograma antes del momento critico.\u25cf\u00bfC\u00f3mo?\u25cfEn Python podemos usar input() .Depuraci\u00f3n troglodita avanzada\n\u25cfPodemos mejorar un poco las cosas si usamos \nun booleano  para decidir si mostrar  o no los \nmensajes de depuraci\u00f3n:\ndebug = True\nfor i in range(10):\n  if (debug):\n    print(\u201cVoy por la vuelta\u201d + i) # debug\n  hacerCosas(i)\n\u25cfAs\u00ed, si queremos deshabilitarlos , basta con \nponer debug a False.Depuraci\u00f3n con fundamento  Depuraci\u00f3n con fundamento\n\u25cfCasi todos los entornos de desarrollo cuentan \ncon un depurador integrado .\u25cfEn Python, la librer\u00eda est\u00e1ndar incorpora el pdb \n(Python debugger).Depuraci\u00f3n\n\u25cfConceptos importantes:\n\u25cfBreakpoint : punto de ruptura de la ejecuci\u00f3n.\u2013Pondremos un breakpoint antes de la parte que creemos \nproblem\u00e1tica.\u2013Una vez detenido el programa, podremos ir avanzando \npaso a paso.\u25cfPost-mortem : an\u00e1lisis del programa una vez ya ha \nfallado.Depuraci\u00f3n\n\u25cfBreakpoint : pdb.set_trace()\nimport pdb\ndef div(a, b):\n    \"\"\"Return a / b.\"\"\"pdb.set_trace()\n    return a / b\n>>> print(div(5, 0))\n-> return a / b\n(Pdb)  Depuraci\u00f3n\n\u25cfUna vez pdb ha parado, podemos hacer muchas \ncosas: \n(Pdb) p a # imprime el valor actual de a\n(Pdb) !b = 1 # cambia el valor de b\n(Pdb) next # avanza un paso la ejecuci\u00f3n\n(Pdb) step # como next pero entrando en funciones\n(Pdb) until 12 # contin\u00faa la ejecuci\u00f3n hasta la l\u00ednea 12\n(Pdb) continue # contin\u00faa la ejecuci\u00f3n\n(Pdb) h # ayuda\n(Pdb) interact # consola de Python con todas las variables  Depuraci\u00f3n\n\u25cfPost-mortem : lanza tu script con:\npython -m pdb script.py\n\u25cfUna vez se produzca el error, pdb habr\u00e1 parado y \npodremos depurar el c\u00f3digo.Referencias\n\u25cfC\u00f3mo Pensar como un Inform\u00e1tico.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "85343648-8023-4c3a-9427-e6c4e693464e": {"__data__": {"id_": "85343648-8023-4c3a-9427-e6c4e693464e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "552b0da3-0b2e-4b08-80b2-0c64760fb520", "node_type": "4", "metadata": {"filename": "Prog1-05-Depuracion.pdf"}, "hash": "ee94f0dff7fc84936bd1ffe4d29fffcbfa60ee14c37c423230c954374558a7b3", "class_name": "RelatedNodeInfo"}}, "text": "El aprender \ncon Python 2\u00b0 Edici\u00f3n por Jeffrey Elkner, Allen \nB. Downey, y Chris Meyers (trad.Gregorio \nInda)\n\u25cfrecursospython.com\n\u25cfWikipedia.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ccf835b2-e33a-469c-bb2d-010cfff1631c": {"__data__": {"id_": "ccf835b2-e33a-469c-bb2d-010cfff1631c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "552b0da3-0b2e-4b08-80b2-0c64760fb520", "node_type": "4", "metadata": {"filename": "Prog1-05-Depuracion.pdf"}, "hash": "ee94f0dff7fc84936bd1ffe4d29fffcbfa60ee14c37c423230c954374558a7b3", "class_name": "RelatedNodeInfo"}}, "text": "Referencias\n\u25cfIm\u00e1genes:\n\u25cfWikipedia\n\u25cfGeek & poke.\u25cfPhDcomics.com\n\u25cfhttps://www.flickr.com/photos/thaqela/6774236608\n\u25cfhttps://www.flickr.com/photos/jechstra/21828418272", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"47e9ef11-42cf-4a56-8b44-f1b425ac60c6": {"doc_hash": "a1913dbffc3d52e2f392032a2bdb9efccc90091e7c78eb926159a1eb895c55a0", "ref_doc_id": "02146a45-2a3e-4a71-879e-de39c4a101ac"}, "0645953f-d0fd-4a7c-bed3-bfe2a175d003": {"doc_hash": "01fd61082a323a2043e2aad05ebb68cca736b37fa5cd9513f965c1def41d68b6", "ref_doc_id": "48a58fe0-7595-4d4c-b41c-5137dee0f666"}, "e14e67f4-7056-49d0-b5f2-79b9f6355d9c": {"doc_hash": "f0c0f355468db51d37872d76a92292b33e8ddc08ffdd9910853852ff716b2590", "ref_doc_id": "48a58fe0-7595-4d4c-b41c-5137dee0f666"}, "b9b7fdaa-3e70-4784-b636-0eb6e31f60d0": {"doc_hash": "ce79aa5a5a9bb4dadc927ee49384a90fbe3608c5d508b82697d7789832c95b92", "ref_doc_id": "bcc805f1-a826-47c9-81af-dfd7a0bdff27"}, "955587a4-a71b-42b6-8ecb-cf063f805f4d": {"doc_hash": "04df43946a5be62b2bd759030398e86efba9d22c0ae3da1794bc3d9b1a24e89c", "ref_doc_id": "bcc805f1-a826-47c9-81af-dfd7a0bdff27"}, "e16197c7-1b52-481c-9b7b-cf14259c21fb": {"doc_hash": "ce79aa5a5a9bb4dadc927ee49384a90fbe3608c5d508b82697d7789832c95b92", "ref_doc_id": "bea8640c-52f0-4ff4-ae73-e935df3a343a"}, "217ce391-91b4-4165-8ab1-b37fbcd23e28": {"doc_hash": "04df43946a5be62b2bd759030398e86efba9d22c0ae3da1794bc3d9b1a24e89c", "ref_doc_id": "bea8640c-52f0-4ff4-ae73-e935df3a343a"}, "7c7fa7ae-6deb-4acd-86e3-c286212c1610": {"doc_hash": "b08d888b6a3118ae5bab982d78b562ef2f66ce304ac6ebfb7e7408b9db74eaad", "ref_doc_id": "8b0a6950-0656-4ee0-aebd-5d8b29251ba2"}, "8db46277-fc30-4511-8919-4934c6151676": {"doc_hash": "4eb17d9d654dce726f50c692f76f63023102e48fa83d0e40762558abaa82f4b1", "ref_doc_id": "8b0a6950-0656-4ee0-aebd-5d8b29251ba2"}, "b9c80b84-b6f4-4059-af11-297122942a4d": {"doc_hash": "0a40a4444bb08999315295eced241b3e13e1d7bb64cd51028744cf49c3399a66", "ref_doc_id": "8b0a6950-0656-4ee0-aebd-5d8b29251ba2"}, "cb7aa400-771a-46b3-b4d4-40e9f9827743": {"doc_hash": "671aed4b89e028f3aceb58bce71bf795674668d7946444005b124b2638717f4d", "ref_doc_id": "8b0a6950-0656-4ee0-aebd-5d8b29251ba2"}, "17412b99-53b6-4d88-98c4-5a74d8491534": {"doc_hash": "57a0b93e1b5f5369281ea045f02c6942108c64929f95d92c9ada8cd4afa17e50", "ref_doc_id": "8b0a6950-0656-4ee0-aebd-5d8b29251ba2"}, "2975fce4-d93c-471d-93cc-d3574a430f37": {"doc_hash": "6cfda206970fb1db5e78a52bc2f49c936cd3cfd64aa750930f76cb73a040a321", "ref_doc_id": "58093e18-790a-4d20-9e2e-6224ae1d25c5"}, "cdede245-4e5e-4ca5-8526-566d2aa8f1e9": {"doc_hash": "1035d8ddb7dc082dc27dd810453d295473de020dc33072fb92b470b4cc42dfec", "ref_doc_id": "58093e18-790a-4d20-9e2e-6224ae1d25c5"}, "f82ee364-ad3e-4ee8-b4ae-050bc454d9b4": {"doc_hash": "72d961a7a8bf23dd2697a67359644e5a39672c73438a0ed49aa07e47de5b353c", "ref_doc_id": "7486cc26-ef20-404c-be4e-54a98e97ee27"}, "0f8c1c21-e87e-460a-a9bc-7ac599366ea8": {"doc_hash": "d7211c7352b7db5006dea95a83ce75831b2be5e328c3591c83a77eae1a2bdc75", "ref_doc_id": "7486cc26-ef20-404c-be4e-54a98e97ee27"}, "9b59d6ff-80d3-4dc5-b4ea-360942e65a3b": {"doc_hash": "dde379c9ca8c3d33aef869b113de4963234ba54d515192eea7e6c0b82f5402f7", "ref_doc_id": "7486cc26-ef20-404c-be4e-54a98e97ee27"}, "74227077-8902-4f0a-aeed-f1d42f076d95": {"doc_hash": "d24681494f6b8e1b207a6021f0e67777518916d98a530e7e0efe840e4145f26e", "ref_doc_id": "7486cc26-ef20-404c-be4e-54a98e97ee27"}, "28170f9f-7089-4ffc-b2af-c32bc16b1258": {"doc_hash": "97d5fcada0c96a1c0a744ec37eef30e444ac370334e6f4a8f02fa6c796c32bb6", "ref_doc_id": "7486cc26-ef20-404c-be4e-54a98e97ee27"}, "801484b2-b7b0-4b81-bf15-f57f5766d140": {"doc_hash": "e63672ccae09b76f071eb90989717ec13d82b9bdc36a8ec8f5987cf03831abc2", "ref_doc_id": "7486cc26-ef20-404c-be4e-54a98e97ee27"}, "8ca49d48-28e2-4f14-811c-d10177c6e499": {"doc_hash": "5c583d87b6c09c3a1fda6ff0688114fcc6e0b82ebfbf825fb74d729195c98605", "ref_doc_id": "4572a799-7e0f-4f1f-b927-caadc7bb7e93"}, "da2cc954-fa80-4745-8b47-0a50086b0dba": {"doc_hash": "49ce1fb4151a53ddad4a8a7554ccac379d72cf72aad80a7b572987f766b1ba2f", "ref_doc_id": "4572a799-7e0f-4f1f-b927-caadc7bb7e93"}, "0c7f59d6-3c5a-47b1-a820-725f1fcbe59f": {"doc_hash": "ba7599986e234458a2a72530aeb752563272d71a0a90eed15d19ed18661f0a66", "ref_doc_id": "4572a799-7e0f-4f1f-b927-caadc7bb7e93"}, "ab8cdeec-142b-4afc-965f-098bb3eb4c01": {"doc_hash": "532e63eb665de2deb9228e8506f571ce725233ffec576616981cc2ee194972f2", "ref_doc_id": "9ce22730-2c0d-41be-8f2b-6c9098a902b2"}, "061d24e7-95b1-4b6b-820a-b69ac8a6edaf": {"doc_hash": "0ee648d7f607e556f1e51eda6767bc338b8ece3aed7e172a456ab8a5504a8acd", "ref_doc_id": "9ce22730-2c0d-41be-8f2b-6c9098a902b2"}, "0dcb2fac-5066-45c4-8f69-7d3f10ffc656": {"doc_hash": "5643e8ebbf76f4b5f6e2d33af045bd498c72d0f32f0da22443247a1d6d33f7dc", "ref_doc_id": "9ce22730-2c0d-41be-8f2b-6c9098a902b2"}, "937a6a7c-458e-46cb-b9d6-ce8a2b9947b9": {"doc_hash": "cda5c323b268cf83dd8d74a793bbc62de63609e6d6bdf902fc6c3f6aaf1276fb", "ref_doc_id": "9ce22730-2c0d-41be-8f2b-6c9098a902b2"}, "c0c8337e-3590-4749-ad49-17134e518e0f": {"doc_hash": "67ff64800ec677f63487affcef93449c1ee3a99eb4b1e328b667617c293ebcec", "ref_doc_id": "9ce22730-2c0d-41be-8f2b-6c9098a902b2"}, "c30a1b0f-251a-40f7-a52b-b0c583cfdcf4": {"doc_hash": "07ec3701334d29d6e30d05bc5b2a54bca909dae8668beab2d65cc65b44579336", "ref_doc_id": "42e46db8-62ed-4b42-8f60-916f07cfae52"}, "757b37e3-f9e2-4bbf-8184-077c486fc8dc": {"doc_hash": "7e50c5f6698b1f0f941dac86b110f00178929e414554aa52cb1aa9fc12c3501c", "ref_doc_id": "42e46db8-62ed-4b42-8f60-916f07cfae52"}, "69378cdc-12e3-4e2f-91f5-d4eba5725c69": {"doc_hash": "8b12246385c737c6fca21dd4658f3ff7e3f13f31b42a6422c9c96fe988164876", "ref_doc_id": "42e46db8-62ed-4b42-8f60-916f07cfae52"}, "a8762eef-1e58-4257-8602-b5bb81c8cda0": {"doc_hash": "758eda8a57451955500ba70999fa33cd44ccc6415b7fdeff5d9e0fd891bb3c35", "ref_doc_id": "66257f9d-d499-4608-a2d7-23876d9e75ea"}, "81a25092-59ea-466a-a364-cd235c4d5fd7": {"doc_hash": "8b35548e142845f0241aff729ccee3f2ac2e85ecc05fe600005ccecda36c9fce", "ref_doc_id": "66257f9d-d499-4608-a2d7-23876d9e75ea"}, "5174d234-6367-4691-9765-f648a9ce4829": {"doc_hash": "1899ccb0a94fc482d45d9ac3012dfaab605e8dbcb7dc2d80fccb8fee7f826c3b", "ref_doc_id": "66257f9d-d499-4608-a2d7-23876d9e75ea"}, "0bb154ac-9d13-402a-bead-a6fec122e3de": {"doc_hash": "4b6841416cfc7a7c5b09e52a392ab92c1d7d3ac6930cacff0592fc93cd7a2cda", "ref_doc_id": "fc594f1a-e4d0-4f01-83c0-a4a91698bb44"}, "d3ec67a6-1259-42a7-94cc-e035a844328e": {"doc_hash": "efe9dbb998904b00b5bb84908e63c5d4b2d3a50e8372be27dbf7c81a9fd6e770", "ref_doc_id": "fc594f1a-e4d0-4f01-83c0-a4a91698bb44"}, "a79e4c05-39a6-469f-90d7-27480a0e9299": {"doc_hash": "81380b45758285ecc0cc8599df269ab93f73aa6aba5a37cfd30b5fe2c70cf7c5", "ref_doc_id": "fc594f1a-e4d0-4f01-83c0-a4a91698bb44"}, "1e0588a9-e3a2-4d97-b3e0-19668680584b": {"doc_hash": "c44fce7bc4277c554484a662705b2725deba94a38fb0f74b06840bd6e57ac177", "ref_doc_id": "a3021ab9-59c4-43a9-ba64-6883769b3ef7"}, "2cc25073-7696-46ed-9874-21f03ba0523c": {"doc_hash": "99b5a33764c36189d40e3e98d58489735156e8113903fcc8710620abc0b58370", "ref_doc_id": "a3021ab9-59c4-43a9-ba64-6883769b3ef7"}, "e24141e0-bdaa-4909-8e06-37c6332cc910": {"doc_hash": "795bafa5c01b31710ab5a45cf4a4e222b84168f869bbcf76e041ca0185951a14", "ref_doc_id": "552b0da3-0b2e-4b08-80b2-0c64760fb520"}, "85343648-8023-4c3a-9427-e6c4e693464e": {"doc_hash": "d42b63704b5b1a83604324c4155586a0ed948075185d9cd78eac8f162d61a6b9", "ref_doc_id": "552b0da3-0b2e-4b08-80b2-0c64760fb520"}, "ccf835b2-e33a-469c-bb2d-010cfff1631c": {"doc_hash": "1c463dddfe9e4f7aec4968b7d0f421a4ce255c450c7e2a27f5af4821c007871e", "ref_doc_id": "552b0da3-0b2e-4b08-80b2-0c64760fb520"}}, "docstore/ref_doc_info": {"02146a45-2a3e-4a71-879e-de39c4a101ac": {"node_ids": ["47e9ef11-42cf-4a56-8b44-f1b425ac60c6"], "metadata": {}}, "48a58fe0-7595-4d4c-b41c-5137dee0f666": {"node_ids": ["0645953f-d0fd-4a7c-bed3-bfe2a175d003", "e14e67f4-7056-49d0-b5f2-79b9f6355d9c"], "metadata": {}}, "bcc805f1-a826-47c9-81af-dfd7a0bdff27": {"node_ids": ["b9b7fdaa-3e70-4784-b636-0eb6e31f60d0", "955587a4-a71b-42b6-8ecb-cf063f805f4d"], "metadata": {}}, "bea8640c-52f0-4ff4-ae73-e935df3a343a": {"node_ids": ["e16197c7-1b52-481c-9b7b-cf14259c21fb", "217ce391-91b4-4165-8ab1-b37fbcd23e28"], "metadata": {}}, "8b0a6950-0656-4ee0-aebd-5d8b29251ba2": {"node_ids": ["7c7fa7ae-6deb-4acd-86e3-c286212c1610", "8db46277-fc30-4511-8919-4934c6151676", "b9c80b84-b6f4-4059-af11-297122942a4d", "cb7aa400-771a-46b3-b4d4-40e9f9827743", "17412b99-53b6-4d88-98c4-5a74d8491534"], "metadata": {}}, "58093e18-790a-4d20-9e2e-6224ae1d25c5": {"node_ids": ["2975fce4-d93c-471d-93cc-d3574a430f37", "cdede245-4e5e-4ca5-8526-566d2aa8f1e9"], "metadata": {}}, "7486cc26-ef20-404c-be4e-54a98e97ee27": {"node_ids": ["f82ee364-ad3e-4ee8-b4ae-050bc454d9b4", "0f8c1c21-e87e-460a-a9bc-7ac599366ea8", "9b59d6ff-80d3-4dc5-b4ea-360942e65a3b", "74227077-8902-4f0a-aeed-f1d42f076d95", "28170f9f-7089-4ffc-b2af-c32bc16b1258", "801484b2-b7b0-4b81-bf15-f57f5766d140"], "metadata": {}}, "4572a799-7e0f-4f1f-b927-caadc7bb7e93": {"node_ids": ["8ca49d48-28e2-4f14-811c-d10177c6e499", "da2cc954-fa80-4745-8b47-0a50086b0dba", "0c7f59d6-3c5a-47b1-a820-725f1fcbe59f"], "metadata": {}}, "9ce22730-2c0d-41be-8f2b-6c9098a902b2": {"node_ids": ["ab8cdeec-142b-4afc-965f-098bb3eb4c01", "061d24e7-95b1-4b6b-820a-b69ac8a6edaf", "0dcb2fac-5066-45c4-8f69-7d3f10ffc656", "937a6a7c-458e-46cb-b9d6-ce8a2b9947b9", "c0c8337e-3590-4749-ad49-17134e518e0f"], "metadata": {}}, "42e46db8-62ed-4b42-8f60-916f07cfae52": {"node_ids": ["c30a1b0f-251a-40f7-a52b-b0c583cfdcf4", "757b37e3-f9e2-4bbf-8184-077c486fc8dc", "69378cdc-12e3-4e2f-91f5-d4eba5725c69"], "metadata": {}}, "66257f9d-d499-4608-a2d7-23876d9e75ea": {"node_ids": ["a8762eef-1e58-4257-8602-b5bb81c8cda0", "81a25092-59ea-466a-a364-cd235c4d5fd7", "5174d234-6367-4691-9765-f648a9ce4829"], "metadata": {}}, "fc594f1a-e4d0-4f01-83c0-a4a91698bb44": {"node_ids": ["0bb154ac-9d13-402a-bead-a6fec122e3de", "d3ec67a6-1259-42a7-94cc-e035a844328e", "a79e4c05-39a6-469f-90d7-27480a0e9299"], "metadata": {}}, "a3021ab9-59c4-43a9-ba64-6883769b3ef7": {"node_ids": ["1e0588a9-e3a2-4d97-b3e0-19668680584b", "2cc25073-7696-46ed-9874-21f03ba0523c"], "metadata": {}}, "552b0da3-0b2e-4b08-80b2-0c64760fb520": {"node_ids": ["e24141e0-bdaa-4909-8e06-37c6332cc910", "85343648-8023-4c3a-9427-e6c4e693464e", "ccf835b2-e33a-469c-bb2d-010cfff1631c"], "metadata": {}}}}